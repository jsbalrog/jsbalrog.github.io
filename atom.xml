<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2013-10-21T10:56:44-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[Ted Jenkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding == Practice]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice/"/>
    <updated>2013-10-19T12:41:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice</id>
    <content type="html"><![CDATA[<p>In my other life I&rsquo;m a musician&mdash;a guitarist who plays in a band.
I used to tell my guitar students that it takes literally miles
of practice&mdash;DAILY practice&mdash;up and down the guitar fretboard to feel comfortable
improv-ing a solo on the guitar with a band. I could always tell the
students that practiced a little every day versus the ones who thought
they could practice for three hours once a week. The ones who practiced
just minutes every day always improved more rapidly.</p>

<!-- more -->


<p>One of the tools I used in my own daily practice routine was called
&ldquo;<a href="http://www.learn-guitar-online.com/pentatonicpower.html">Pentatonic Power</a>&rdquo;
by Bob Murnahan. The thinking is that musicianship is like language&mdash;
you practice daily on committing to muscle memory the various pieces of
the language&rsquo;s vocabulary, so that you have at your command the ability to combine
those pieces together into interesting ways.</p>

<p>The key here was that practice of these vocabulary pieces was to be a
daily endeavor to be successful. Daily repetition committed the
vocabulary building blocks to muscle memory. For daily repetition to
be possible, it was essential that they were small units of work.</p>

<p>I think the same is true in my software programming life. Just as it
takes miles up and down the fretboard to have command of the instrument,
I believe it takes miles back and forth across the keyboard to master
the vocabulary pieces&mdash;the algorithms and idioms&mdash;of a computer language,
or even of software engineering and problem-solving in general.</p>

<p>Dave Thomas, an important figure in the Ruby Community and Pragmatic
Programming wrote a <a href="http://codekata.pragprog.com/2007/01/code_kata_backg.html#more">blog post</a> several years back on this same idea, but couched within the notion of a &ldquo;kata&rdquo;, where
the value of practice is emphasized when learning a creative process. He says,</p>

<p>&ldquo;<em>&hellip;see if you can carve out 45 to 60 minutes to play with a small
piece of code. You don’t necessarily have to look at performance:
perhaps you could play with the structure, or the memory use, or the
interface. In the end it doesn’t matter. Experiment, measure, improve.</p>

<p>Practice.</em>&#8221;</p>

<p>I didn&rsquo;t have the benefit of the hours of practice that naturally are a
result of being a computer science major in university while completing class assignments.
I had to make up for it on my own with daily practice. Dave&rsquo;s suggestions ring true. If I can take 30-60 minutes
every day to code a solution to a problem, I find that coding is more
embedded in my &ldquo;muscle memory&rdquo;, and it makes me a better on-the-job
programmer.</p>

<p>To that end, I have always been looking for &ldquo;exercises&rdquo; to add to my
daily routine. The aforementioned blog offers several suggestions as katas,
and there are links to the <a href="http://rubyquiz.com/">Ruby Quiz</a> as well. The language typically doesn&rsquo;t
matter, as most translate to any programming language you choose. The point
is to get your brain and your fingers adept at solving problems in code.</p>

<p>What other lists of coding exercises have people discovered useful?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promises in Angular.js]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js/"/>
    <updated>2013-10-17T21:43:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js</id>
    <content type="html"><![CDATA[<p>One of the hardest things for me to grok in JavaScript was promise-based style
handling of the async nature of the language.
I understood the async JavaScript just fine, and could wield callbacks
like a banshee. However, promise-based structures provided a more elegant solution
than callbacks&mdash;particularly when you were several calls deep. I will describe
what I learned in the context of Angular, as it has a very simple yet elegant
implementation of promises in its $q library.</p>

<!-- more -->


<p>First, imagine we have a function for a person. We will define two callbacks for
this person: one for what success for them would be, and one for what their
life&rsquo;s error condition would look like. We&rsquo;ll assume they are either happy or
sad:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is happy because &quot;</span> <span class="o">+</span> <span class="nx">reason</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is sad because &quot;</span> <span class="o">+</span> <span class="nx">reason</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;ll create this person:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Fred&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need to define a task that needs to be accomplished in the future. We&rsquo;ll
say it&rsquo;s a delivery of shiny new roller stakes from Amazon. Receiving them
would be a success, and thus make Fred happy. Having them not delivered would
be an error, and thus make Fred really sad.</p>

<p>To do so, we&rsquo;ll create a task using $q&rsquo;s defer() method. This creates a
deferred object, which holds the future task execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This future task object has a promise object as a property; it is the placeholder
for the results of the task&rsquo;s execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then set up the order of events, using &ldquo;promise, then&rdquo; syntax. This takes the
place of passing callback(s) to the task method, and having the task method have to call
them when complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">results</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">fred</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fred</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then have the task programmatically succeed or fail depending on whatever
arbitrary logic we choose. $q&rsquo;s parlance is &ldquo;resolve&rdquo; or &ldquo;reject&rdquo;.</p>

<p>If we succeed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">task</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;Roller skates from Amazon have arrived&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;the appropriate &ldquo;happy&rdquo; success method is called. Conversely, if we fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">task</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s2">&quot;Roller skates from Amazon are backordered&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;the appropriate &ldquo;sad&rdquo; error method is called.</p>

<p>This is a pretty simple example, one that maybe unneccessarily takes on a lot of
overhead for promises. But you can see how if we now introduce other objects&mdash;say
an Amazon online store that has takeOrder, deliverOrder, and problemWithOrder
methods&mdash;using promises could avoid multiple levels of callback heck. The takeOrder
method could take an argument of ordered items, and set up a current order that
had an items property as well as a task deferred object. Instead of returning the
order, it simply returns the promise property of the task deferred object, which
is used to call then() on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">amazon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MailOrder</span><span class="p">(</span><span class="nx">$q</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">itemDelivered</span> <span class="o">=</span> <span class="nx">amazon</span><span class="p">.</span><span class="nx">takeOrder</span><span class="p">(</span><span class="s1">&#39;Nexus 7&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">itemDelivered</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">fred</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fred</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="nx">amazon</span><span class="p">.</span><span class="nx">problemWithOrder</span><span class="p">(</span><span class="s1">&#39;Nexus 7 is no longer in stock!&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>edit:</em> After writing this post I came across one written at the same time, but better, and with a better metaphor.
See <a href="http://andyshora.com/promises-angularjs-explained-as-cartoon.html">&ldquo;Promises in AngularJS, Explained as a Cartoon&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Closures In Javascript]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript/"/>
    <updated>2013-10-17T09:06:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript</id>
    <content type="html"><![CDATA[<p>Closures are a common point of confusion for the JavaScript-uninitiated. Recently, a came across a couple-years-old
post on the topic. I think it covers the subject well: check out Angus Croll&rsquo;s &ldquo;<a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">Understanding JavaScript Closures</a>&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
