<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2014-10-05T10:32:38-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[JS Balrog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talkin' 'bout angular directives]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives/"/>
    <updated>2014-10-03T15:37:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives</id>
    <content type="html"><![CDATA[<p>In this post, let’s take a look at the power of directives, and in particular,
the power of isolate scope-based directives.</p>

<!-- more -->


<h3>In the beginning</h3>

<p>Let’s start with this use case: I’ve got a list of friends and I want to list out
their name and their hobby. The html looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div ng-controller=“MyCtrl as main”>
</span><span class='line'>  &lt;ul>
</span><span class='line'>    &lt;li ng-repeat=“friend in main.friends”>My name is {{ friend.name }}, I play the {{ friend.hobby }}.&lt;/li>
</span><span class='line'>  &lt;/ul>
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>&hellip;And here&rsquo;s the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="err">‘</span><span class="nx">myApp</span><span class="err">’</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="err">‘</span><span class="nx">MyCtrl</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">friends</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="err">‘</span><span class="nx">name</span><span class="err">’</span><span class="o">:</span> <span class="err">‘</span><span class="nx">Fred</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">hobby</span><span class="err">’</span><span class="o">:</span> <span class="err">‘</span><span class="nx">kazoo</span><span class="err">’</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="err">‘</span><span class="nx">name</span><span class="err">’</span><span class="o">:</span> <span class="err">‘</span><span class="nx">Eliot</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">hobby</span><span class="err">’</span><span class="o">:</span> <span class="err">‘</span><span class="nx">harp</span><span class="err">’</span> <span class="p">}</span>
</span><span class='line'>     <span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward. Well, let&rsquo;s add to the use case: I want to be able to
“cool-i-fy” any friend in the list by clicking them—no matter who I click,
I want their name to be upgraded to “B.B. King” and their hobby upgraded to
“guitar”. Instant coolness!</p>

<p>So, I do something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;li ng-repeat=“friend in main.friends” ng-click=“main.coolifyMe(friend)”>My name is {{ friend.name }}, I play the {{ friend.hobby }}.&lt;/li>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and the corresponding method in the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">coolifyMe</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">friend</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="err">“</span><span class="nx">B</span><span class="p">.</span><span class="nx">B</span><span class="p">.</span> <span class="nx">King</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>     <span class="nx">friend</span><span class="p">.</span><span class="nx">hobby</span> <span class="o">=</span> <span class="err">“</span><span class="nx">guitar</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still straightforward, and works well.</p>

<h3>Enter: A custom directive</h3>

<p>But wait, I want this to be available throughout my app,
anywhere I’ve got a list of friends. And I show a list of friends 24 different places.
Sounds like a job for a reusable custom directive!</p>

<p>So, I’m going to create a directive, coolnessDir, that can be reused anywhere.
Here’s what the html looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div ng-controller=“MyCtrl as main”>
</span><span class='line'>  &lt;ul>
</span><span class='line'>    &lt;coolness-dir>&lt;/coolness-dir>
</span><span class='line'>  &lt;/ul>
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>Nice, neat, compact html, which is what angular directives are awesome for. Here’s
our directive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="err">‘</span><span class="nx">coolnessDir</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="err">‘</span><span class="nx">E</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="err">‘</span><span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="err">“</span><span class="nx">friend</span> <span class="k">in</span> <span class="nx">main</span><span class="p">.</span><span class="nx">friends</span><span class="err">”</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="err">“</span><span class="nx">coolifyMe</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span><span class="err">”</span><span class="o">&gt;</span><span class="nx">My</span> <span class="nx">name</span> <span class="nx">is</span> <span class="p">,</span> <span class="nx">I</span> <span class="nx">play</span> <span class="nx">the</span> <span class="p">.</span><span class="o">&lt;</span><span class="err">/li&gt;’,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">coolifyMe</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">friend</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="err">“</span><span class="nx">B</span><span class="p">.</span><span class="nx">B</span><span class="p">.</span> <span class="nx">King</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">friend</span><span class="p">.</span><span class="nx">hobby</span> <span class="o">=</span> <span class="err">“</span><span class="nx">guitar</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I rip the <code>coolifyMe</code> function out of the controller altogether. Notice that the <code>coolifyMe</code>
method in the directive’s <code>link</code> function (I have a <code>link</code> function because we’re manipulating
  the DOM) looks nearly identical to our old method.</p>

<p>Okay, everything’s good. Works like a champ.</p>

<h3>A problem arises</h3>

<p>But wait. There is a list where I want to use this directive, but it&rsquo;s controller defines
the list as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">enemies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Ted&#39;</span><span class="p">,</span> <span class="s1">&#39;hobby&#39;</span><span class="o">:</span> <span class="s1">&#39;kazoo&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Charlie&#39;</span><span class="p">,</span> <span class="s1">&#39;hobby&#39;</span><span class="o">:</span> <span class="s1">&#39;harp&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>What’s this <code>enemies</code> business? My directive code template refers to <code>friends</code> in
its template&mdash;this will break!</p>

<h3>Isolate scope to the rescue!</h3>

<p>Isolate scope comes to the rescue here—it allows us to seal off the directive from
 the enclosing scope(s), and “poke holes” selectively to allow certain values through,
 while also allowing us to redefine those values. We’re going to make sure that whatever
 value gets through to our directive’s template, it’s called <code>friend</code>!</p>

<p>First, here’s what our html looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;ul>
</span><span class='line'>     &lt;coolness-dir friends=“main.enemies”>&lt;/coolness-dir>
</span><span class='line'>&lt;/ul>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Notice that we added an attribute to our directive: <code>friends</code>. This is the hole
through to the directive. Speaking of which, here’s the code now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="err">‘</span><span class="nx">coolnessDir</span><span class="err">’</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="err">‘</span><span class="nx">E</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">friends</span><span class="o">:</span> <span class="err">‘</span><span class="o">=</span><span class="err">‘</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="err">‘</span><span class="o">&lt;</span><span class="nx">li</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;friend in friends&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="err">“</span><span class="nx">coolifyMe</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span><span class="err">”</span><span class="o">&gt;</span><span class="nx">My</span> <span class="nx">name</span> <span class="nx">is</span> <span class="p">,</span> <span class="nx">I</span> <span class="nx">play</span> <span class="nx">the</span> <span class="p">.</span><span class="o">&lt;</span><span class="err">/li&gt;’,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">coolifyMe</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">friend</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">friend</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="err">“</span><span class="nx">B</span><span class="p">.</span><span class="nx">B</span><span class="p">.</span> <span class="nx">King</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">friend</span><span class="p">.</span><span class="nx">hobby</span> <span class="o">=</span> <span class="err">“</span><span class="nx">guitar</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how we have a scope property now, and we define a key <code>friends</code>, which matches
our attribute name that we added. The equals sign says “we want to two-way data
bind this, and furthermore, do it as the same name: <code>friends</code>&ldquo;.</p>

<p>Now, we can easily use this directive wherever—-all we need to do is change the
attribute <code>friends=</code> to be whatever the controller sets the value of the list to.
This insulates our usage of <code>friends</code> in our directive from breaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorator pattern in JavaScript]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/08/15/decorator-pattern-in-javascript/"/>
    <updated>2014-08-15T12:29:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/08/15/decorator-pattern-in-javascript</id>
    <content type="html"><![CDATA[<p>Last time I mentioned I was going to focus on some OO-related javascript concerns.
For this post, I want to talk about a programming pattern that I use quite often:
the Decorator pattern.</p>

<!-- more -->


<p>The Decorator pattern is defined as &ldquo;a design pattern that allows behavior to be
added to an individual object, either statically or dynammically, without affecting
the behavior of other objects from the same class.&rdquo; <a href="https://http://en.wikipedia.org/wiki/Decorator_pattern">(source)</a></p>

<p>What this means in plain english is that we can extend an object&rsquo;s functionality&mdash;
even at runtime&mdash;and even with multiple decorators. This is pretty common in the
&lsquo;classical&rsquo; OO world of, say, java. Here&rsquo;s how we&rsquo;d do it prototypically in
javascript.</p>

<p>Let&rsquo;s say that we&rsquo;ve got a Guitar store shopping cart written in javascript. At
checkout time the user can select various options or upgrades to add to their
guitar. We will implement these options as decorators.</p>

<p>First, the guitar model. It will manage a list of decorators. Here&rsquo;s the constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">(</span><span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span> <span class="o">||</span> <span class="mi">699</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">decoratorsList</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the decorators themselves. Decorators will be implemented as properties of
<code>Guitar.decorators</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">decorators</span> <span class="o">=</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we add the various decorator properties. These are the options/upgrades the
user can select.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Ebony fretboard option: $100</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">decorators</span><span class="p">.</span><span class="nx">ebonyFretboard</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getPrice</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">price</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Mother of pearl inlay option: $75</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">decorators</span><span class="p">.</span><span class="nx">motherOfPearlInlays</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getPrice</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">price</span> <span class="o">+</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Gold hardware option: $50</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">decorators</span><span class="p">.</span><span class="nx">goldHardware</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getPrice</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">price</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">price</span> <span class="o">+</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the Guitar&rsquo;s decorate method. This is the method called at runtime, and
it simply pushes each decorator onto the guitar&rsquo;s <code>decoratorList</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">decorate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">decorator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">decoratorsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">decorator</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we return the guitar instance. This is so we can chain decorator calls.</p>

<p>Finally, our <code>getPrice()</code> method for our shopping cart checkout. It simply goes
through a list of decorators and calls each decorator&rsquo;s <code>getPrice()</code> method, passing
the results from the previous call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrice</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">price</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">max</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">decoratorsList</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">decoratorsList</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">price</span> <span class="o">=</span> <span class="nx">Guitar</span><span class="p">.</span><span class="nx">decorators</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">getPrice</span><span class="p">(</span><span class="nx">price</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">price</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. Here&rsquo;s the client code in action. We&rsquo;ll create a couple
of guitars and print out the price.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fender</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">(</span><span class="mi">499</span><span class="p">);</span>
</span><span class='line'><span class="nx">fender</span><span class="p">.</span><span class="nx">decorate</span><span class="p">(</span><span class="s1">&#39;goldHardware&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fender</span><span class="p">.</span><span class="nx">getPrice</span><span class="p">());</span> <span class="c1">// 549</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">takamine</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">();</span>
</span><span class='line'><span class="nx">takamine</span><span class="p">.</span><span class="nx">decorate</span><span class="p">(</span><span class="s1">&#39;motherOfPearlInlays&#39;</span><span class="p">).</span><span class="nx">decorate</span><span class="p">(</span><span class="s1">&#39;ebonyFretboard&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">takamine</span><span class="p">.</span><span class="nx">getPrice</span><span class="p">());</span> <span class="c1">// 874</span>
</span></code></pre></td></tr></table></div></figure>


<p>This ought to whet your appetite for finding other uses for the decorator pattern
in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OO javascript: Creating objects]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects/"/>
    <updated>2014-07-16T07:35:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects</id>
    <content type="html"><![CDATA[<p>For a few posts we’ll talk a bit about programming javascript in such a way as to take advantage of OO principles of reuse, including encapsulation,
inheritance, and polymorphism. Javascript of course has no concept of such things as classes; therefore, we use common javascript principles in order to
take advantage of such things–even for how we define a javascript “object”.
This post in particular will focus on javascript object creation.</p>

<!-- more -->


<p>There really is no way to define a class in javascript. ECMA-262 defines an object as an “unordered collection of properties each of which contains a
primitive value, object, or function.” As such, a javascript object is really nothing more than an array of values (which could be any combination of
primitives, other objects, or functions) that are named. This means that an object in javascript is more closely aligned to what I as a traditional
OO-language developer think of as a hash table or a map–a grouping of name-value pairs.</p>

<h3>Creating objects</h3>

<p>Here’s how you’d typically create an object in javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">guitar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="s2">&quot;Fender&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">guitar</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">guitar</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="mi">1963</span><span class="p">;</span>
</span><span class='line'><span class="nx">guitar</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;Electric&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">guitar</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks good. The problem with this traditional approach is that if you were to create multiple guitar objects, you’d be duplicating a lot of code. Dang! This is where programming patterns can help.</p>

<h3>The factory pattern</h3>

<p>Let&rsquo;s set up a bit of code that acts like a factory&mdash;in other
words, it is responsible for creating a guitar whenever we call it.
We&rsquo;ll call it <code>createGuitar</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createGuitar</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">o</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;And then this factory function could be used to build multiple objects with little code duplication:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">guitar1</span> <span class="o">=</span> <span class="nx">createGuitar</span><span class="p">(</span><span class="s2">&quot;Fender&quot;</span><span class="p">,</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">,</span> <span class="mi">1963</span><span class="p">,</span> <span class="s2">&quot;electric&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar2</span> <span class="o">=</span> <span class="nx">createGuitar</span><span class="p">(</span><span class="s2">&quot;Gibson&quot;</span><span class="p">,</span> <span class="s2">&quot;Hummingbird&quot;</span><span class="p">,</span> <span class="mi">1957</span><span class="p">,</span> <span class="s2">&quot;acoustic&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with the factory pattern is that we can’t identify what type of an object guitar1 or guitar2 is. Change the names of the variables, and it’s even more potentially confusing. That&rsquo;s
where the constructor pattern helps.</p>

<h3>The constructor pattern</h3>

<p>Let&rsquo;s create a function that&mdash;like the factory pattern&mdash;is responsible
for creating our objects. However, let&rsquo;s take advantage of some built-in
features of javascript itself (specifically the <code>new</code> operator and the
<code>this</code> keyword) to be able to identify the object type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">(</span><span class="s2">&quot;Fender&quot;</span><span class="p">,</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">,</span> <span class="mi">1963</span><span class="p">,</span> <span class="s2">&quot;electric&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">(</span><span class="s2">&quot;Gibson&quot;</span><span class="p">,</span> <span class="s2">&quot;Hummingbird&quot;</span><span class="p">,</span> <span class="mi">1957</span><span class="p">,</span> <span class="s2">&quot;acoustic&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this constructor is just a function named Guitar (with an uppercase “G”, as javascript convention dictates). No object being created, the properties and methods are assigned to the “this” object, and no return statement. Calling a constructor with the “new” operator causes four steps:
1. Create a new object.
2. Assign the scope of the constructor to the new object so <code>this</code> points to the new object.
3. Execute the code inside the constructor which adds properties to the new object.
4. Return the new object.</p>

<p>Furthermore, each of these objects has a “constructor” property that points back to the “Guitar” constructor/function. This property was intended for use in identifying the object type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">guitar1</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">Guitar</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">Guitar</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an advantage over the Factory pattern. The “instanceof” operator is considered to be a safer way of determining type.</p>

<p>The only difference between javascript “constructors” and other javascript functions is the way they are called (with the <code>new</code> operator).
Any function that is called with the <code>new</code> operator acts as a constructor. So, what if I call it without the <code>new</code> operator? The properties
get added to the <code>window</code> object. <code>this</code> then points to the “Global” object when a function is called in the global scope. Using <code>new</code>
assigns the scope of the function to the new object represented by the variable (<code>var</code>).</p>

<p>So, any possible problems here?</p>

<p>Try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">==</span> <span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think the result is?</p>

<p>If you said &ldquo;false&rdquo;, give yourself a brownie.
For every object created with a constructor pattern, a new method/function instance is created for each object instance–they are not the same instance of “Function”. The constructor is really doing the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the function/method <code>getBrand</code>, a new Function object
is created every time a new Guitar is created.</p>

<p>We really don’t need two instances of Function that do the same thing. One workaround is to move the function definition outside of the constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="nx">getBrand</span><span class="p">;</span> <span class="c1">// set the getBrand variable to the global</span>
</span><span class='line'><span class="nx">getBrand</span><span class="p">()</span> <span class="kd">function</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// getBrand defined here is a global function</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getBrand</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but clutters up the global scope. Think if <code>Guitar</code> had more methods, like <code>getModel</code>, <code>getYear</code>, <code>play</code>, etc.!</p>

<h3>The prototype pattern</h3>

<p>The prototype pattern solves this problem. Every function is created with a <code>prototype</code> property, which is an object containing properties and methods that
should be available to instances of a particular reference type.</p>

<p>Let’s rewrite the previous example to use the prototype pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="s2">&quot;Fender&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="mi">2006</span><span class="p">;</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;electric&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>     <span class="c1">// &quot;Fender&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>     <span class="c1">// &quot;Fender&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">==</span> <span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">);</span>    <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we still call the (now empty) <code>Guitar</code> function as a constructor
to create new guitars and we have the properties and methods present, which
here are shared among instances.</p>

<p><code>guitar1</code> has a property that points to the prototype object. So does <code>guitar2</code>.
(This is known internally as <code>__proto__</code>, which can be examined via the <code>isPrototypeOf()</code> method).
The <code>Guitar</code> constructor function has a member called <code>prototype</code>, which also points to the
prototype object. So,</p>

<ul>
<li><code>guitar1.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>guitar2.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>Guitar.prototype</code> points to <code>Guitar</code>’s prototype object</li>
</ul>


<p>This protoype object has a <code>constructor</code> property. It also has other
properties and methods as defined by the user. This constructor property points back to the <code>constructor</code> function (<code>Guitar</code>).</p>

<p>Here&rsquo;s alternate prototype syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="o">:</span> <span class="nx">Guitar</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">brand</span> <span class="o">:</span> <span class="s2">&quot;Fender&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">model</span> <span class="o">:</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">year</span> <span class="o">:</span> <span class="mi">2006</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;electric&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">getBrand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span> <span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>     <span class="c1">// &quot;Fender&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>     <span class="c1">// &quot;Fender&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">==</span> <span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">);</span>    <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to note that it is not possible to overwrite prototype’s values. In other words, if you add a property to an instance that is the same name as a property on the object’s prototype, you create the property on the instance, which shadows the property on the prototype. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="s2">&quot;PRS&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>  <span class="c1">// PRS</span>
</span></code></pre></td></tr></table></div></figure>


<p>To find a property, the javascript compiler performs a two-Step Search order: First it checks the instance for the property/method. If it’s not found there, it then checks the prototype.</p>

<p>There are some problems with this approach. You can’t pass initialization arguments into the constructor–all instances of the object get the same property values by default.</p>

<p>This kinda blows because typically we don’t want all of our object’s properties to have the same values–we want a guitar that’s a Fender brand, we want one that’s a PRS, etc. And yet we still want to take advantage of having methods shared among the various objects. What we need is a combination of approaches.</p>

<h3>The Constructor/Prototype combination pattern</h3>

<p>In the Constructor/Prototype Combination pattern, the constructor defines instance properties, and the prototype defines methods and shared properties. Best of both worlds, right? To do it,
we take a clue from the alternate prototype syntax described above, and explicitly set the constructor
property on the prototype object to point to our constructor function. However, the only other property we define is the method we want shared. Every other property
goes in the constructor function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Guitar</span><span class="p">(</span><span class="nx">brand</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">brand</span> <span class="o">=</span> <span class="nx">brand</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">year</span> <span class="o">=</span> <span class="nx">year</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Guitar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="o">:</span> <span class="nx">Guitar</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">getBrand</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">brand</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">(</span><span class="s2">&quot;Fender&quot;</span><span class="p">,</span> <span class="s2">&quot;Stratocaster&quot;</span><span class="p">,</span> <span class="mi">1963</span><span class="p">,</span> <span class="s2">&quot;electric&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">guitar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Guitar</span><span class="p">(</span><span class="s2">&quot;Gibson&quot;</span><span class="p">,</span> <span class="s2">&quot;Hummingbird&quot;</span><span class="p">,</span> <span class="mi">1957</span><span class="p">,</span> <span class="s2">&quot;acoustic&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>
</span><span class='line'><span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">();</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">guitar1</span><span class="p">.</span><span class="nx">getBrand</span> <span class="o">===</span> <span class="nx">guitar2</span><span class="p">.</span><span class="nx">getBrand</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have our cake and eat it, too: We can create guitars passing
in different initialization parameters for each one, and yet all guitars
share the same <code>getBrand</code> method. Great, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stick it to DRM]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/05/06/stick-it-to-drm/"/>
    <updated>2014-05-06T08:10:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/05/06/stick-it-to-drm</id>
    <content type="html"><![CDATA[<p>As an Open-Source advocate, DRM&mdash;<em>Digital Rights Management</em>, or a way to control access to
material in digital format&mdash;has long been a sticking point for me. International Day Against
DRM is Tuesday, May 6th. Several publishing houses are marking this day with great discounts.
One such publisher that I really like, Packt (pronounced &ldquo;packed&rdquo;) Publishing, is offering
anything in their catalog for $10 during May 6th. Pretty sweet, huh?</p>

<!-- more -->


<p>Here&rsquo;re the details from
Packt Publishing&rsquo;s press release:</p>

<p>&ldquo;Packt Publishing firmly believes that you should be able to read and interact with
your content when you want, where you want, and how you want – to that end they
have been advocates of DRM-free content since their very first eBook was published
back in 2004.&rdquo;</p>

<p>&ldquo;To show their continuing support for <a href="https://www.defectivebydesign.org/dayagainstdrm">Day Against DRM</a>,
Packt Publishing is offering all its DRM-free content at $10 for 24 hours only on May
6th eBooks and Videos at www.packtpub.com.&rdquo;</p>

<p>&ldquo;Our top priority at Packt has always been to meet the evolving needs of developers in the most practical way possible, while at the same time protecting the hard work of
our authors. DRM-free content continues to be instrumental in making that happen, providing the flexibility and freedom that is essential for an efficient and enhanced
learning experience. That’s why we’ve been DRM-free from the beginning – we’ll never put limits on the innovation of our users.&rdquo;</p>

<p>– Dave Maclean, Managing Director</p>

<p>Advocates of Day Against DRM are invited to spread the word and celebrate on May 6th by exploring the full range of DRM-free content at <a href="http://www.packtpub.com">packtpub.com</a>, where all eBooks and Videos will be $10 for 24 hours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook auth with Angularjs and tokens]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens/"/>
    <updated>2014-04-20T19:28:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens</id>
    <content type="html"><![CDATA[<p>(For full example code, see my <a href="https://github.com/jsbalrog/angular-fullstack-tokens">angular-fullstack-tokens repo</a>.)</p>

<p>I have an angular-fullstack based app (angular, node, express, passport),
and I&rsquo;m using token-based authentication following <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">this great blogpost</a>,
rather than cookie-based, using express-jwt and jsonwebtoken.</p>

<p>I started with daftmonk&rsquo;s <a href="https://github.com/DaftMonk/generator-angular-fullstack">angular-fullstack</a>,
replaced its authentication system with tokens (easy enough), then set
out to include social-based authentication for facebook, using passport-
facebook. I kept running into CSRF-prevention issues, with the error
No &lsquo;Access-Control-Allow-Origin&rsquo; header is present on the requested
resource.</p>

<p>Without going too far off topic, this was due to the fact that
I was attempting to make an <code>$http</code> call from the client to a node route
that I had set up for facebook authentication, rather than simply using
an anchor tag href call on the client. Ajax calls are particular tricky
across domain origins. I had to set it up this way because I wanted my
server to return user info of my making back to the client.</p>

<p>I tried solutions outlined <a href="http://matthewtyler.io/handling-oauth2-with-node-js-and-angular-js-passport-to-the-rescue/">here</a>
and <a href="http://scotch.io/tutorials/javascript/easy-node-authentication-facebook">here</a>,
each to no avail. Granted, both were under the &ldquo;cookie-based auth&rdquo; umbrella,
but that shouldn&rsquo;t matter, right?</p>

<p>After searching for nearly two days, I came up with the idea of making
auth request client-side, rather than server-side. Using the <a href="https://github.com/ninjatronic/ngFacebook">ngFacebook</a>
angular module along with <a href="https://github.com/werk85/grunt-ng-constant">grunt-ng-constant</a> gave me the answer I needed.
Here&rsquo;s how to do it.</p>

<!-- more -->


<h3>Client-side auth with ngFacebook</h3>

<p>First, install ngFacebook via Bower:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install ngFacebook -save</span></code></pre></td></tr></table></div></figure>


<p>Then, in your angular app.js (or wherever you do your module&rsquo;s config),
declare &lsquo;facebook&rsquo; as a dependency, and initialize using your Facebook&rsquo;s
app id, thus:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;my-angularjs-app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;facebook&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$facebookProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$facebookProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$facebookProvider</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">appId</span><span class="o">:</span> <span class="s1">&#39;myFbApplicationId&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(But what about multiple environments? Those FB apps are picky about site URLs.
More on this in the next section&hellip;)</p>

<p>Now, wherever you plan on having the user do the facebook auth, add the proper
button:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-large&quot;</span> <span class="na">data-ng-click=</span><span class="s">&quot;loginFacebook()&quot;</span><span class="nt">&gt;</span>Login with Facebook<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, in your controller, set up calls to do your facebook logins much the
same way you would typically make calls using Facebook&rsquo;s javascript SDK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">loginFacebook</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$facebook</span><span class="p">.</span><span class="nx">login</span><span class="p">({</span><span class="nx">scope</span><span class="o">:</span><span class="s1">&#39;email&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">me</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Error!&quot;</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$facebook</span><span class="p">.</span><span class="nx">api</span><span class="p">(</span><span class="s1">&#39;/me&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">fields</span><span class="o">:</span> <span class="s1">&#39;id, name, email, username&#39;</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Auth</span><span class="p">.</span><span class="nx">loginFacebook</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that it&rsquo;s all promised-based goodness. For my purposes, in the result
of my call to &lsquo;/me&rsquo; I&rsquo;m in turn making an <code>$http</code> call to one of my server routes
that I have set up for checking for user info/creating a new user in my own
data store. On a successful return there, I direct the user to the homepage.</p>

<p>For sake of completeness, here&rsquo;s my Auth service method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">loginFacebook</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">(),</span>
</span><span class='line'>          <span class="nx">cb</span> <span class="o">=</span> <span class="nx">callback</span> <span class="o">||</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">noop</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;here&quot;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login/facebook&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$window</span><span class="p">.</span><span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// Do something with the user here</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">profile</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">delete</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// Do something else here</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, back to that question of different facebook app id&rsquo;s to account for
different environments. grunt-ng-constant to the rescue&hellip;</p>

<h3>Using grunt-ng-constant</h3>

<p>First, let&rsquo;s install grunt-ng-constant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">constant</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, in your <code>Gruntfile.js</code>, enter the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// constants</span>
</span><span class='line'><span class="nx">ngconstant</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Options for all targets</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// Environment targets</span>
</span><span class='line'>  <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;/scripts/config.js&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ENV</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;facebook&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appId</span><span class="o">:</span> <span class="s1">&#39;YOUR_APP_ID&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">production</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;/scripts/config.js&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ENV</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;facebook&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appId</span><span class="o">:</span> <span class="s1">&#39;YOUR_PROD_APP_ID&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells grunt to automatically create a file called config.js under
the <code>scripts</code> folder.</p>

<p>How do we tell grunt when to create this file? I put mine in the section
that tells it to run a local server for development. I added it to the run
task of the <code>grunt serve</code> task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:dist:keepalive&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ngconstant:development&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;concurrent:server&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;autoprefixer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;connect:livereload&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;watch&#39;</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, for grunt production, I added mine to the <code>grunt build</code> task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;clean:dist&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;ngconstant:production&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;bower-install&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When grunt runs, a config.js file is created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;ENV&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;facebook&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;appId&#39;</span><span class="o">:</span> <span class="s1">&#39;your-development-appId&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to add this new file to our index.html:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/scripts/config.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can inject it into our angular app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngCookies&#39;</span><span class="p">,</span> <span class="s1">&#39;ngResource&#39;</span><span class="p">,</span> <span class="s1">&#39;ngSanitize&#39;</span><span class="p">,</span> <span class="s1">&#39;ngRoute&#39;</span><span class="p">,</span> <span class="s1">&#39;facebook&#39;</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">]).</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">,</span> <span class="nx">$locationProvider</span><span class="p">,</span> <span class="nx">$httpProvider</span><span class="p">,</span> <span class="nx">$facebookProvider</span><span class="p">,</span> <span class="nx">ENV</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, in the config of our app (the same place where we init our facebook module),
we use the ENV constant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$facebookProvider</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="nx">appId</span><span class="o">:</span> <span class="nx">ENV</span><span class="p">.</span><span class="nx">appId</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Now, when you click the &ldquo;Login with Facebook&rdquo; button, the facebook login
popup will show that is the right facebook app for your environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding == Practice]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice/"/>
    <updated>2013-10-19T12:41:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice</id>
    <content type="html"><![CDATA[<p>In my other life I&rsquo;m a musician&mdash;a guitarist who plays in a band.
I used to tell my guitar students that it takes literally miles
of practice&mdash;DAILY practice&mdash;up and down the guitar fretboard to feel comfortable
improv-ing a solo on the guitar with a band. I could always tell the
students that practiced a little every day versus the ones who thought
they could practice for three hours once a week. The ones who practiced
just minutes every day always improved more rapidly.</p>

<!-- more -->


<p>One of the tools I used in my own daily practice routine was called
<a href="http://www.learn-guitar-online.com/pentatonicpower.html">Pentatonic Power</a>
by Bob Murnahan. The thinking is that musicianship is like language&mdash;
you practice daily on committing to muscle memory the various pieces of
the language&rsquo;s vocabulary, so that you have at your command the ability to combine
those pieces together into interesting ways.</p>

<p>The key here was that practice of these vocabulary pieces was to be a
daily endeavor to be successful. Daily repetition committed the
vocabulary building blocks to muscle memory. For daily repetition to
be possible, it was essential that they were small units of work.</p>

<p>I think the same is true in my software programming life. Just as it
takes miles up and down the fretboard to have command of the instrument,
I believe it takes miles back and forth across the keyboard to master
the vocabulary pieces&mdash;the algorithms and idioms&mdash;of a computer language,
or even of software engineering and problem-solving in general.</p>

<p>Dave Thomas, an important figure in the Ruby Community and Pragmatic
Programming wrote a <a href="http://codekata.pragprog.com/2007/01/code_kata_backg.html#more">blog post</a> several years back on this same idea, but couched within the notion of a &ldquo;kata&rdquo;, where
the value of practice is emphasized when learning a creative process. He says,</p>

<p>&ldquo;&hellip;see if you can carve out 45 to 60 minutes to play with a small
piece of code. You don’t necessarily have to look at performance:
perhaps you could play with the structure, or the memory use, or the
interface. In the end it doesn’t matter. Experiment, measure, improve.</p>

<p>Practice.&#8221;</p>

<p>I didn&rsquo;t have the benefit of the hours of practice that naturally are a
result of being a computer science major in university while completing class assignments.
I had to make up for it on my own with daily practice. Dave&rsquo;s suggestions ring true. If I can take 30-60 minutes
every day to code a solution to a problem, I find that coding is more
embedded in my &ldquo;muscle memory&rdquo;, and it makes me a better on-the-job
programmer.</p>

<p>To that end, I have always been looking for &ldquo;exercises&rdquo; to add to my
daily routine. The aforementioned blog offers several suggestions as katas,
and there are links to the <a href="http://rubyquiz.com/">Ruby Quiz</a> as well. The language typically doesn&rsquo;t
matter, as most translate to any programming language you choose. The point
is to get your brain and your fingers adept at solving problems in code.</p>

<p>What other lists of coding exercises have people discovered useful?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promises in Angular.js]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js/"/>
    <updated>2013-10-17T21:43:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js</id>
    <content type="html"><![CDATA[<p>One of the hardest things for me to grok in JavaScript was promise-based style
handling of the async nature of the language.
I understood the async JavaScript just fine, and could wield callbacks
like a banshee. However, promise-based structures provided a more elegant solution
than callbacks&mdash;particularly when you were several calls deep. I will describe
what I learned in the context of Angular, as it has a very simple yet elegant
implementation of promises in its $q library.</p>

<!-- more -->


<p>First, imagine we have a function for a person. We will define two callbacks for
this person: one for what success for them would be, and one for what their
life&rsquo;s error condition would look like. We&rsquo;ll assume they are either happy or
sad:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is happy because &quot;</span> <span class="o">+</span> <span class="nx">reason</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is sad because &quot;</span> <span class="o">+</span> <span class="nx">reason</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;ll create this person:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Fred&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need to define a task that needs to be accomplished in the future. We&rsquo;ll
say it&rsquo;s a delivery of shiny new roller stakes from Amazon. Receiving them
would be a success, and thus make Fred happy. Having them not delivered would
be an error, and thus make Fred really sad.</p>

<p>To do so, we&rsquo;ll create a task using $q&rsquo;s defer() method. This creates a
deferred object, which holds the future task execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This future task object has a promise object as a property; it is the placeholder
for the results of the task&rsquo;s execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">task</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then set up the order of events, using &ldquo;promise, then&rdquo; syntax. This takes the
place of passing callback(s) to the task method, and having the task method have to call
them when complete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">results</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">fred</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fred</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then have the task programmatically succeed or fail depending on whatever
arbitrary logic we choose. $q&rsquo;s parlance is &ldquo;resolve&rdquo; or &ldquo;reject&rdquo;.</p>

<p>If we succeed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">task</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;Roller skates from Amazon have arrived&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;the appropriate &ldquo;happy&rdquo; success method is called. Conversely, if we fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">task</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s2">&quot;Roller skates from Amazon are backordered&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;the appropriate &ldquo;sad&rdquo; error method is called.</p>

<p>This is a pretty simple example, one that maybe unneccessarily takes on a lot of
overhead for promises. But you can see how if we now introduce other objects&mdash;say
an Amazon online store that has takeOrder, deliverOrder, and problemWithOrder
methods&mdash;using promises could avoid multiple levels of callback heck. The takeOrder
method could take an argument of ordered items, and set up a current order that
had an items property as well as a task deferred object. Instead of returning the
order, it simply returns the promise property of the task deferred object, which
is used to call then() on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">amazon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MailOrder</span><span class="p">(</span><span class="nx">$q</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">itemDelivered</span> <span class="o">=</span> <span class="nx">amazon</span><span class="p">.</span><span class="nx">takeOrder</span><span class="p">(</span><span class="s1">&#39;Nexus 7&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">itemDelivered</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">fred</span><span class="p">.</span><span class="nx">success</span><span class="p">,</span> <span class="nx">fred</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="nx">amazon</span><span class="p">.</span><span class="nx">problemWithOrder</span><span class="p">(</span><span class="s1">&#39;Nexus 7 is no longer in stock!&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>edit:</em> After writing this post I came across one written at the same time, but better, and with a better metaphor.
See <a href="http://andyshora.com/promises-angularjs-explained-as-cartoon.html">&ldquo;Promises in AngularJS, Explained as a Cartoon&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Closures In Javascript]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript/"/>
    <updated>2013-10-17T09:06:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript</id>
    <content type="html"><![CDATA[<p>Closures are a common point of confusion for the JavaScript-uninitiated. Recently, a came across a couple-years-old
post on the topic. I think it covers the subject well: check out Angus Croll&rsquo;s &ldquo;<a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">Understanding JavaScript Closures</a>&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
