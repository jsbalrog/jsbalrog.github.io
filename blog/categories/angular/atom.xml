<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angular | JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/blog/categories/angular/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2013-10-19T13:55:25-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[Ted Jenkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Promises in Angular.js]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js/"/>
    <updated>2013-10-17T21:43:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js</id>
    <content type="html"><![CDATA[<p>One of the hardest things for me to grok in JavaScript was promise-based style
handling of the async nature of the language.
I understood the async JavaScript just fine, and could wield callbacks
like a banshee. However, promise-based structures provided a more elegant solution
than callbacks&mdash;particularly when you were several calls deep. I will describe
what I learned in the context of Angular, as it has a very simple yet elegant
implementation of promises in its $q library.</p>

<!-- more -->


<p>First, imagine we have a function for a person. We will define two callbacks for
this person: one for what success for them would be, and one for what their
life&rsquo;s error condition would look like. We&rsquo;ll assume they are either happy or
sad:</p>

<p>```javascript
var Person = function(name) {
  this.success = function(reason) {</p>

<pre><code>console.log(name + " is happy because " + reason);    
</code></pre>

<p>  };</p>

<p>  this.error = function(reason) {</p>

<pre><code>console.log(name + " is sad because " + reason);
</code></pre>

<p>  };
};
```</p>

<p>Next, we&rsquo;ll create this person:</p>

<p><code>javascript
var fred = new Person("Fred");
</code></p>

<p>We now need to define a task that needs to be accomplished in the future. We&rsquo;ll
say it&rsquo;s a delivery of shiny new roller stakes from Amazon. Receiving them
would be a success, and thus make Fred happy. Having them not delivered would
be an error, and thus make Fred really sad.</p>

<p>To do so, we&rsquo;ll create a task using $q&rsquo;s defer() method. This creates a
deferred object, which holds the future task execution:</p>

<p><code>javascript
var task = $q.defer();
</code></p>

<p>This future task object has a promise object as a property; it is the placeholder
for the results of the task&rsquo;s execution:</p>

<p><code>javascript
var results = task.promise;
</code>
We then set up the order of events, using &ldquo;promise, then&rdquo; syntax. This takes the
place of passing callback(s) to the task method, and having the task method have to call
them when complete.</p>

<p><code>javascript
results.then(fred.success, fred.error);
</code>
We can then have the task programmatically succeed or fail depending on whatever
arbitrary logic we choose. $q&rsquo;s parlance is &ldquo;resolve&rdquo; or &ldquo;reject&rdquo;.</p>

<p>If we succeed:</p>

<p><code>javascript
task.resolve("Roller skates from Amazon have arrived");
</code>
&hellip;the appropriate &ldquo;happy&rdquo; success method is called. Conversely, if we fail:</p>

<p><code>javascript
task.reject("Roller skates from Amazon are backordered");
</code>
&hellip;the appropriate &ldquo;sad&rdquo; error method is called.</p>

<p>This is a pretty simple example, one that maybe unneccessarily takes on a lot of
overhead for promises. But you can see how if we now introduce other objects&mdash;say
an Amazon online store that has takeOrder, deliverOrder, and problemWithOrder
methods&mdash;using promises could avoid multiple levels of callback heck. The takeOrder
method could take an argument of ordered items, and set up a current order that
had an items property as well as a task deferred object. Instead of returning the
order, it simply returns the promise property of the task deferred object, which
is used to call then() on:</p>

<p><code>javascript
var amazon = new MailOrder($q);
var itemDelivered = amazon.takeOrder('Nexus 7');
itemDelivered.then(fred.success, fred.error);
amazon.problemWithOrder('Nexus 7 is no longer in stock!');
</code></p>
]]></content>
  </entry>
  
</feed>
