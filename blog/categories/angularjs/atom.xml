<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2014-10-10T15:10:25-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[Ted Jenkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fix Helmet to work with Angularjs and LiveReload]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/10/fix-helmet-to-work-with-angularjs-and-livereload/"/>
    <updated>2014-10-10T14:53:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/10/fix-helmet-to-work-with-angularjs-and-livereload</id>
    <content type="html"><![CDATA[<p>Helmet is a nifty node module&mdash;it provides some protection from several types of application attacks. Here’s a great
<a href="http://scottksmith.com/blog/2014/09/21/protect-your-node-apps-noggin-with-helmet/">post</a> that explains why you should
be using helmet in your node apps.</p>

<p>However, I was getting a couple of errors in my angular-based node app, and on top of that, my livereload stopped working,
which I really depend on in my dev workflow. One of the errors had to do with angular itself, the other had to do with the
injection of the livereload script into my index.html. Here are the two things I did to fix these errors.</p>

<!-- more -->


<h3>The Errors</h3>

<p>First, the errors that were showing up in my browser console whenever I loaded the app:
<code>Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following
Content Security Policy directive: "script-src 'self' 'unsafe-inline’ *.blah.com”</code></p>

<p>and</p>

<p><code>Refused to load the script 'http://localhost:35729/livereload.js?snipver=1' because it violates the following Content
Security Policy directive: "script-src 'self' 'unsafe-inline' *.blah.com”</code></p>

<p>The first error was angular-related, the second livereload-related. I specify <code>‘self’</code> and a domain for <code>defaultSrc</code> and
<code>scriptSrc</code> in my helmet middleware. See the blog post referenced above for more on that.</p>

<h3>The Solutions</h3>

<p>First, to solve the angular issue, I add the <code>ng-csp</code> to my <code>ng-app</code> tag in my index.html so it looks like this:
<code>html
&lt;html ng-app="app" ng-csp&gt;
</code></p>

<p>Second, to solve the liveReload issue, I move my <code>app.use(helmet.csp{...})</code> middleware call into my <code>if(production === env)</code>
block, which is where it should be. I shouldn’t have to worry too much about CSP during dev on my box, which is the only
environment in which connect-livereload inserts the script tag into my index.html anyways.</p>

<p>Performing these two things got rid of the annoying console errors, and bam&mdash;livereload began to work again! Hopefully
this helps someone else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs providers, factories, and services]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/07/angularjs-providers/"/>
    <updated>2014-10-07T17:04:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/07/angularjs-providers</id>
    <content type="html"><![CDATA[<p>When it comes to objects&mdash;and especially singleton objects or factory instances&mdash;angular
offerings are multiple-choice. I want to spell out the differences between
angular-specific providers, services, and factories, and give some guidelines to
when you would use each.</p>

<!-- more -->


<h3>Providers</h3>

<p>At root, all three types of objects basically are providers. <code>angular.service</code> and
<code>angular.factory</code> are syntactic sugar on top of <code>angular.provider</code>. That said, you
should really prefer using a <code>service</code> or a <code>factory</code> (more on these below); use
a <code>provider</code> only when you want to expose an API that you need to access in your
angular module&rsquo;s <code>config</code> block, before the app starts. For example, you may
have a reuseable service for which you want to modify the behavior between
applications.</p>

<p>Let&rsquo;s look at a concrete example. Let&rsquo;s say I have an app that has the requirement
of specifying a different language depending on the app instance that is
running&mdash;the app running on the servers in Japan, for example, must specify
japanese as the app&rsquo;s language. The default language, if no config is
specified, is english. I know, it&rsquo;s pretty contrived&mdash;but hey, I don&rsquo;t write
the requirements, I just implement them.</p>

<p>Here&rsquo;s what our provider looks like:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;, []).provider(&lsquo;languageSetter&rsquo;, function() {</p>

<pre><code>this.lang = 'english';
</code></pre>

<p>  this.$get = function() {</p>

<pre><code>var lang = this.lang;
return {
  getLang: function() {
    return lang;
  }
};
</code></pre>

<p>  };</p>

<p>  this.setLang = function(lang) {</p>

<pre><code>this.lang = lang;
</code></pre>

<p>  };
})
```</p>

<p>The key here is the $get function&mdash;this returns an object that exposes the
API for the app to use at runtime&mdash;in this case <code>getLang</code> is available to
call within an arbitrary controller, etc.</p>

<p>Moreover&mdash;and here&rsquo;s the important thing&mdash;the <code>setLang</code> method is callable
in the app&rsquo;s config block.</p>

<p>So, our app&rsquo;s config code can look like this:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).config(function(languageSetterProvider){</p>

<pre><code>// Configuring a provider
languageSetterProvider.setLang('japanese');
</code></pre>

<p>});
```</p>

<p>Notice that we have to append &ldquo;Provider&rdquo; onto the end of the name of our provider
to be injected into our <code>config</code> function. According to the angular docs, &ldquo;This
injection is done by a provider injector which is different from the regular instance
injector, in that it instantiates and wires (injects) all provider instances only.&rdquo;</p>

<p>During bootstrap of our application, Angular configures and instantiates all providers
during the configuration phase before it moves on to create our services (in the run phase).
Therefore, services aren&rsquo;t yet available. This means that any pre-run configuration
(like our language configuration here) is a prime candidate to be thrown into a provider.</p>

<p>Here&rsquo;s a controller, for sake of completion:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;MyCtrl&rsquo;, function($scope, languageSetter) {</p>

<p>  $scope.languages = [</p>

<pre><code>languageSetter.getLang()
</code></pre>

<p>  ];
});
```</p>

<p>&hellip;and then we can show off our language in an admittedly contrived manner:</p>

<p>
``` html
&hellip;</p>

<div ng-app="myApp">
  <div ng-controller="MyCtrl">
    {{ languages }}
  </div>
</div>


<p>&hellip;
```
</p>

<p>Even though our default language is &ldquo;english&rdquo;, during the app config we set the
language to &ldquo;japanese&rdquo; using our provider.</p>

<h3>Factories</h3>

<p>An Angular factory constructs a new service&hellip;Wait&mdash;what? Yes, even though Angular has
a separate Service recipe, the Angular factory recipe is for providing a singleton
service. The nice thing about a factory is that it&rsquo;s very easy to use (think JavaScript
revealing module pattern), it can have other services dependency injected, and can
be lazily initialized.</p>

<p>To continue our example, let&rsquo;s say that a marketing scheme is to be computed based on
the language that is now stored in the browser&rsquo;s local storage for our app. Here&rsquo;s what
the factory service looks like:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).factory(&lsquo;languageFactory&rsquo;, function() {</p>

<pre><code>var schemify = function(lang) {
    return lang + " marketing scheme--activate!";
};

var getScheme = function() {
    var lang = window.localStorage.getItem('language');
    return schemify(lang);
};
</code></pre>

<p>  return {</p>

<pre><code>getScheme: getScheme
</code></pre>

<p>  };
});
```</p>

<p>&hellip;and then we can inject our factory (service) in our controller, and it will be
lazily instantiated as a singleton:</p>

<p><code>js
angular.module('myApp').controller('MyCtrl', function($scope, languageFactory) {    
  $scope.marketingScheme = languageFactory.getScheme();
});
</code></p>

<p>Notice that we do not have access to our Factory in the config block of our app; it is
not yet instantiated at that point.</p>

<h3>Services</h3>

<p>So, we know so far that a Provider is a service, and a Factory is a service. Not to
mess with you, but a Service is a service as well. Here&rsquo;s what the Angular documentation
says on the topic: &ldquo;Yes, we have called one of our service recipes &lsquo;Service&rsquo;. We regret
this and know that we&rsquo;ll be somehow punished for our misdeed. It&rsquo;s like we named one of
our offspring &lsquo;Child&rsquo;. Boy, that would mess with the teachers.&rdquo;</p>

<p>So now you know. Hopefully we can avoid some confusion. The Service recipe provides a
service just like Factory does, but the difference is that it invokes a constructor with
the JavaScript <code>new</code> operator. The arguments passed to the constructor represent
dependencies needed by instance of this type.</p>

<p>To extend our example once more, let&rsquo;s see what our factory service would look like re-
written as a service, ah, service:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;, []).service(&lsquo;languageService&rsquo;, function() {
  this.schemify = function(lang) {</p>

<pre><code>return lang + " marketing scheme--activate!";
</code></pre>

<p>  };</p>

<p>  this.getScheme = function() {</p>

<pre><code>var lang = 'portuguese';
    return this.schemify(lang);
</code></pre>

<p>  };
});
```</p>

<p>Looks pretty familiar, doesn&rsquo;t it? We&rsquo;re not doing the public/private thing with methods
here, just defining them on the <code>this</code> scope, like we would in a plain ol' JavaScript
constructor. Our controller really doesn&rsquo;t change much.</p>

<p>So, why the difference? Well, in practice, let me say that I use the Factory recipe far
more than the Service recipe. I like being able to specify what methods are exposed as
callable in the return block. Must be some remnant of my old Java public/private days.
I really don&rsquo;t find much use for the Service recipe&mdash;can&rsquo;t see what it buys me. I have
used the Provider recipe a couple of times when I do need to do some configuration in
my app, before it hits the run phase. But again, Factory is far and away what I use most.</p>

<p>Hope this helps clear up some of the confusion between these three services. Of course,
there are also <code>Value</code> and <code>Constant</code>, but those are topics for another day&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talkin' 'bout angular directives]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives/"/>
    <updated>2014-10-03T15:37:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives</id>
    <content type="html"><![CDATA[<p>In this post, let’s take a look at the power of directives, and in particular,
the power of isolate scope-based directives.</p>

<!-- more -->


<h3>In the beginning</h3>

<p>Let’s start with this use case: I’ve got a list of friends and I want to list out
their name and their hobby. The html looks like this:</p>

<p>
``` html</p>

<div ng-controller=“MyCtrl as main”>
  <ul>
    <li ng-repeat=“friend in main.friends”>My name is {{ friend.name }}, I play the {{ friend.hobby }}.</li>
  </ul>
</div>


<p>```
</p>

<p>&hellip;And here&rsquo;s the controller:</p>

<p>``` js
angular.module(‘myApp’, [])
  .controller(‘MyCtrl’, function() {</p>

<pre><code> this.friends = [
      { ‘name’: ‘Fred’, ‘hobby’: ‘kazoo’ },
      { ‘name’: ‘Eliot’, ‘hobby’: ‘harp’ }
 ];
</code></pre>

<p>});
```</p>

<p>Pretty straightforward. Well, let&rsquo;s add to the use case: I want to be able to
“cool-i-fy” any friend in the list by clicking them—no matter who I click,
I want their name to be upgraded to “B.B. King” and their hobby upgraded to
“guitar”. Instant coolness!</p>

<p>So, I do something like this:</p>

<p>
<code>html
&lt;li ng-repeat=“friend in main.friends” ng-click=“main.coolifyMe(friend)”&gt;My name is {{ friend.name }}, I play the {{ friend.hobby }}.&lt;/li&gt;
...
</code>
</p>

<p>&hellip;and the corresponding method in the controller:</p>

<p>``` js
this.coolifyMe = function(friend) {</p>

<pre><code> friend.name = “B.B. King”;
 friend.hobby = “guitar”;
</code></pre>

<p>};
```</p>

<p>Still straightforward, and works well.</p>

<h3>Enter: A custom directive</h3>

<p>But wait, I want this to be available throughout my app,
anywhere I’ve got a list of friends. And I show a list of friends 24 different places.
Sounds like a job for a reusable custom directive!</p>

<p>So, I’m going to create a directive, coolnessDir, that can be reused anywhere.
Here’s what the html looks like:</p>

<p>
``` html</p>

<div ng-controller=“MyCtrl as main”>
  <ul>
    <coolness-dir></coolness-dir>
  </ul>
</div>


<p>```
</p>

<p>Nice, neat, compact html, which is what angular directives are awesome for. Here’s
our directive:</p>

<p>``` js
.directive(‘coolnessDir’, function() {
  return {</p>

<pre><code>restrict: ‘E’,
replace: true,
template: ‘&lt;li ng-repeat=“friend in main.friends” ng-click=“coolifyMe(friend)”&gt;My name is , I play the .&lt;/li&gt;’,
link: function(scope, elem, attrs) {
  scope.coolifyMe = function(friend) {
    friend.name = “B.B. King”;
    friend.hobby = “guitar”;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>I rip the <code>coolifyMe</code> function out of the controller altogether. Notice that the <code>coolifyMe</code>
method in the directive’s <code>link</code> function (I have a <code>link</code> function because we’re manipulating
  the DOM) looks nearly identical to our old method.</p>

<p>Okay, everything’s good. Works like a champ.</p>

<h3>A problem arises</h3>

<p>But wait. There is a list where I want to use this directive, but it&rsquo;s controller defines
the list as follows:</p>

<p>``` js
this.enemies = [</p>

<pre><code>{ 'name': 'Ted', 'hobby': 'kazoo' },
{ 'name': 'Charlie', 'hobby': 'harp' }
</code></pre>

<p>  ];
```</p>

<p>What’s this <code>enemies</code> business? My directive code template refers to <code>friends</code> in
its template&mdash;this will break!</p>

<h3>Isolate scope to the rescue!</h3>

<p>Isolate scope comes to the rescue here—it allows us to seal off the directive from
 the enclosing scope(s), and “poke holes” selectively to allow certain values through,
 while also allowing us to redefine those values. We’re going to make sure that whatever
 value gets through to our directive’s template, it’s called <code>friend</code>!</p>

<p>First, here’s what our html looks like:</p>

<p>
``` html
&hellip;</p>

<ul>
     <coolness-dir friends=“main.enemies”></coolness-dir>
</ul>


<p>&hellip;
```
</p>

<p>Notice that we added an attribute to our directive: <code>friends</code>. This is the hole
through to the directive. Speaking of which, here’s the code now:</p>

<p>``` js
.directive(‘coolnessDir’, function() {
  return {</p>

<pre><code>restrict: ‘E’,
replace: true,
scope: {
  friends: ‘=‘
},
template: ‘&lt;li ng-repeat="friend in friends" ng-click=“coolifyMe(friend)”&gt;My name is , I play the .&lt;/li&gt;’,
link: function(scope, elem, attrs) {
  scope.coolifyMe = function(friend) {
    friend.name = “B.B. King”;
    friend.hobby = “guitar”;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>Notice how we have a scope property now, and we define a key <code>friends</code>, which matches
our attribute name that we added. The equals sign says “we want to two-way data
bind this, and furthermore, do it as the same name: <code>friends</code>&ldquo;.</p>

<p>Now, we can easily use this directive wherever—-all we need to do is change the
attribute <code>friends=</code> to be whatever the controller sets the value of the list to.
This insulates our usage of <code>friends</code> in our directive from breaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook auth with Angularjs and tokens]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens/"/>
    <updated>2014-04-20T19:28:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens</id>
    <content type="html"><![CDATA[<p>(For full example code, see my <a href="https://github.com/jsbalrog/angular-fullstack-tokens">angular-fullstack-tokens repo</a>.)</p>

<p>I have an angular-fullstack based app (angular, node, express, passport),
and I&rsquo;m using token-based authentication following <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">this great blogpost</a>,
rather than cookie-based, using express-jwt and jsonwebtoken.</p>

<p>I started with daftmonk&rsquo;s <a href="https://github.com/DaftMonk/generator-angular-fullstack">angular-fullstack</a>,
replaced its authentication system with tokens (easy enough), then set
out to include social-based authentication for facebook, using passport-
facebook. I kept running into CSRF-prevention issues, with the error
No &lsquo;Access-Control-Allow-Origin&rsquo; header is present on the requested
resource.</p>

<p>Without going too far off topic, this was due to the fact that
I was attempting to make an <code>$http</code> call from the client to a node route
that I had set up for facebook authentication, rather than simply using
an anchor tag href call on the client. Ajax calls are particular tricky
across domain origins. I had to set it up this way because I wanted my
server to return user info of my making back to the client.</p>

<p>I tried solutions outlined <a href="http://matthewtyler.io/handling-oauth2-with-node-js-and-angular-js-passport-to-the-rescue/">here</a>
and <a href="http://scotch.io/tutorials/javascript/easy-node-authentication-facebook">here</a>,
each to no avail. Granted, both were under the &ldquo;cookie-based auth&rdquo; umbrella,
but that shouldn&rsquo;t matter, right?</p>

<p>After searching for nearly two days, I came up with the idea of making
auth request client-side, rather than server-side. Using the <a href="https://github.com/ninjatronic/ngFacebook">ngFacebook</a>
angular module along with <a href="https://github.com/werk85/grunt-ng-constant">grunt-ng-constant</a> gave me the answer I needed.
Here&rsquo;s how to do it.</p>

<!-- more -->


<h3>Client-side auth with ngFacebook</h3>

<p>First, install ngFacebook via Bower:</p>

<p><code>
bower install ngFacebook -save
</code></p>

<p>Then, in your angular app.js (or wherever you do your module&rsquo;s config),
declare &lsquo;facebook&rsquo; as a dependency, and initialize using your Facebook&rsquo;s
app id, thus:</p>

<p>```javascript
angular</p>

<pre><code>.module('my-angularjs-app', ['facebook'])
.config(['$facebookProvider', function($facebookProvider) {
    $facebookProvider.init({
        appId: 'myFbApplicationId'
    });
}]);
</code></pre>

<p>```</p>

<p>(But what about multiple environments? Those FB apps are picky about site URLs.
More on this in the next section&hellip;)</p>

<p>Now, wherever you plan on having the user do the facebook auth, add the proper
button:</p>

<p><code>html
&lt;button type="button" class="btn btn-primary btn-large" data-ng-click="loginFacebook()"&gt;Login with Facebook&lt;/button&gt;
</code>
Next, in your controller, set up calls to do your facebook logins much the
same way you would typically make calls using Facebook&rsquo;s javascript SDK:</p>

<p>```javascript
$scope.loginFacebook = function() {
  $facebook.login({scope:&lsquo;email&rsquo;}).then(function(response) {</p>

<pre><code>$scope.me();
</code></pre>

<p>  },
  function(response) {</p>

<pre><code>console.log("Error!", response);
</code></pre>

<p>  });
};
$scope.me = function() {
  $facebook.api(&lsquo;/me&rsquo;, {fields: &lsquo;id, name, email, username&rsquo;}).then(function(response) {</p>

<pre><code>Auth.loginFacebook(response).then(function() {
  $location.path('/');
});
</code></pre>

<p>  });
};
```</p>

<p>Notice that it&rsquo;s all promised-based goodness. For my purposes, in the result
of my call to &lsquo;/me&rsquo; I&rsquo;m in turn making an <code>$http</code> call to one of my server routes
that I have set up for checking for user info/creating a new user in my own
data store. On a successful return there, I direct the user to the homepage.</p>

<p>For sake of completeness, here&rsquo;s my Auth service method:</p>

<p>```javascript
loginFacebook: function(user, callback) {</p>

<pre><code>  var deferred = $q.defer(),
      cb = callback || angular.noop;
  console.log("here", user);
  $http.post('/login/facebook', user)
    .success(function(data) {
      $window.sessionStorage.token = data.token;
      // Do something with the user here
      deferred.resolve(profile);
    })
    .error(function(data) {
      delete $window.sessionStorage.token;
      // Do something else here
      deferred.reject($rootScope.currentUser);
    });
  return deferred.promise;
}
</code></pre>

<p>```</p>

<p>So, back to that question of different facebook app id&rsquo;s to account for
different environments. grunt-ng-constant to the rescue&hellip;</p>

<h3>Using grunt-ng-constant</h3>

<p>First, let&rsquo;s install grunt-ng-constant:</p>

<p><code>
npm install grunt-ng-constant --save-dev
</code>
Next, in your <code>Gruntfile.js</code>, enter the following:</p>

<p>```javascript
// constants
ngconstant: {
  // Options for all targets
  options: {</p>

<pre><code>name: 'config',
</code></pre>

<p>  },
  // Environment targets
  development: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.app %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_APP_ID'
  }
}
</code></pre>

<p>  },
  production: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.dist %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_PROD_APP_ID'
  }
}
</code></pre>

<p>  }
},
```</p>

<p>This tells grunt to automatically create a file called config.js under
the <code>scripts</code> folder.</p>

<p>How do we tell grunt when to create this file? I put mine in the section
that tells it to run a local server for development. I added it to the run
task of the <code>grunt serve</code> task:</p>

<p>```javascript
grunt.registerTask(&lsquo;serve&rsquo;, function (target) {
  if (target === &lsquo;dist&rsquo;) {</p>

<pre><code>return grunt.task.run(['build', 'connect:dist:keepalive']);
</code></pre>

<p>  }</p>

<p>  grunt.task.run([</p>

<pre><code>'clean:server',
'ngconstant:development',
'bower-install',
'concurrent:server',
'autoprefixer',
'connect:livereload',
'watch'
</code></pre>

<p>  ]);
});
<code>``
And then, for grunt production, I added mine to the</code>grunt build` task:</p>

<p><code>javascript
grunt.registerTask('build', [
  'clean:dist',
  'ngconstant:production',
  'bower-install'
]);
</code></p>

<p>When grunt runs, a config.js file is created:</p>

<p>```javascript
angular.module(&lsquo;config&rsquo;, [])</p>

<p>.constant(&lsquo;ENV&rsquo;, {
  &lsquo;name&rsquo;: &lsquo;facebook&rsquo;,
  &lsquo;appId&rsquo;: &lsquo;your-development-appId&rsquo;
});
```
We need to add this new file to our index.html:</p>

<p>```html</p>

<script src="http://jsbalrog.github.io/scripts/config.js"></script>


<p>```</p>

<p>Now we can inject it into our angular app:</p>

<p><code>javascript
angular.module('myApp', ['ngCookies', 'ngResource', 'ngSanitize', 'ngRoute', 'facebook', 'config']).config(function ($routeProvider, $locationProvider, $httpProvider, $facebookProvider, ENV) {
</code></p>

<p>Finally, in the config of our app (the same place where we init our facebook module),
we use the ENV constant:</p>

<p><code>javascript
$facebookProvider.init({appId: ENV.appId});
</code></p>

<p>And that&rsquo;s it! Now, when you click the &ldquo;Login with Facebook&rdquo; button, the facebook login
popup will show that is the right facebook app for your environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promises in Angular.js]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js/"/>
    <updated>2013-10-17T21:43:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js</id>
    <content type="html"><![CDATA[<p>One of the hardest things for me to grok in JavaScript was promise-based style
handling of the async nature of the language.
I understood the async JavaScript just fine, and could wield callbacks
like a banshee. However, promise-based structures provided a more elegant solution
than callbacks&mdash;particularly when you were several calls deep. I will describe
what I learned in the context of Angular, as it has a very simple yet elegant
implementation of promises in its $q library.</p>

<!-- more -->


<p>First, imagine we have a function for a person. We will define two callbacks for
this person: one for what success for them would be, and one for what their
life&rsquo;s error condition would look like. We&rsquo;ll assume they are either happy or
sad:</p>

<p>```javascript
var Person = function(name) {
  this.success = function(reason) {</p>

<pre><code>console.log(name + " is happy because " + reason);
</code></pre>

<p>  };</p>

<p>  this.error = function(reason) {</p>

<pre><code>console.log(name + " is sad because " + reason);
</code></pre>

<p>  };
};
```</p>

<p>Next, we&rsquo;ll create this person:</p>

<p><code>javascript
var fred = new Person("Fred");
</code></p>

<p>We now need to define a task that needs to be accomplished in the future. We&rsquo;ll
say it&rsquo;s a delivery of shiny new roller stakes from Amazon. Receiving them
would be a success, and thus make Fred happy. Having them not delivered would
be an error, and thus make Fred really sad.</p>

<p>To do so, we&rsquo;ll create a task using $q&rsquo;s defer() method. This creates a
deferred object, which holds the future task execution:</p>

<p><code>javascript
var task = $q.defer();
</code></p>

<p>This future task object has a promise object as a property; it is the placeholder
for the results of the task&rsquo;s execution:</p>

<p><code>javascript
var results = task.promise;
</code>
We then set up the order of events, using &ldquo;promise, then&rdquo; syntax. This takes the
place of passing callback(s) to the task method, and having the task method have to call
them when complete.</p>

<p><code>javascript
results.then(fred.success, fred.error);
</code>
We can then have the task programmatically succeed or fail depending on whatever
arbitrary logic we choose. $q&rsquo;s parlance is &ldquo;resolve&rdquo; or &ldquo;reject&rdquo;.</p>

<p>If we succeed:</p>

<p><code>javascript
task.resolve("Roller skates from Amazon have arrived");
</code>
&hellip;the appropriate &ldquo;happy&rdquo; success method is called. Conversely, if we fail:</p>

<p><code>javascript
task.reject("Roller skates from Amazon are backordered");
</code>
&hellip;the appropriate &ldquo;sad&rdquo; error method is called.</p>

<p>This is a pretty simple example, one that maybe unneccessarily takes on a lot of
overhead for promises. But you can see how if we now introduce other objects&mdash;say
an Amazon online store that has takeOrder, deliverOrder, and problemWithOrder
methods&mdash;using promises could avoid multiple levels of callback heck. The takeOrder
method could take an argument of ordered items, and set up a current order that
had an items property as well as a task deferred object. Instead of returning the
order, it simply returns the promise property of the task deferred object, which
is used to call then() on:</p>

<p><code>javascript
var amazon = new MailOrder($q);
var itemDelivered = amazon.takeOrder('Nexus 7');
itemDelivered.then(fred.success, fred.error);
amazon.problemWithOrder('Nexus 7 is no longer in stock!');
</code>
<em>edit:</em> After writing this post I came across one written at the same time, but better, and with a better metaphor.
See <a href="http://andyshora.com/promises-angularjs-explained-as-cartoon.html">&ldquo;Promises in AngularJS, Explained as a Cartoon&rdquo;</a>.</p>
]]></content>
  </entry>
  
</feed>
