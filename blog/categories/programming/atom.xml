<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2014-07-16T09:35:32-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[Ted Jenkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OO javascript: Creating objects]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects/"/>
    <updated>2014-07-16T07:35:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects</id>
    <content type="html"><![CDATA[<p>For a few posts we’ll talk a bit about programming javascript in such a way as to take advantage of OO principles of reuse, including encapsulation,
inheritance, and polymorphism. Javascript of course has no concept of such things as classes; therefore, we use common javascript principles in order to
take advantage of such things–even for how we define a javascript “object”.
This post in particular will focus on javascript object creation.</p>

<!-- more -->


<p>There really is no way to define a class in javascript. ECMA-262 defines an object as an “unordered collection of properties each of which contains a
primitive value, object, or function.” As such, a javascript object is really nothing more than an array of values (which could be any combination of
primitives, other objects, or functions) that are named. This means that an object in javascript is more closely aligned to what I as a traditional
OO-language developer think of as a hash table or a map–a grouping of name-value pairs.</p>

<h3>Creating objects</h3>

<p>Here’s how you’d typically create an object in javascript:</p>

<p>```javascript
var guitar = new Object();
guitar.brand = &ldquo;Fender&rdquo;;
guitar.model = &ldquo;Stratocaster&rdquo;;
guitar.year = 1963;
guitar.type = &ldquo;Electric&rdquo;;</p>

<p>guitar.getBrand = function() {</p>

<pre><code>alert(this.brand);
</code></pre>

<p>};
```
Looks good. The problem with this traditional approach is that if you were to create multiple guitar objects, you’d be duplicating a lot of code. Dang! This is where programming patterns can help.</p>

<h3>The factory pattern</h3>

<p>Let&rsquo;s set up a bit of code that acts like a factory&mdash;in other
words, it is responsible for creating a guitar whenever we call it.
We&rsquo;ll call it <code>createGuitar</code>:</p>

<p>```javascript
function createGuitar(brand, model, year, type) {</p>

<pre><code>var o = new Object();
o.brand = brand;
o.model = model;
o.year = year;
o.type = type;

o.getBrand = function() {
    alert(this.brand);
};
return o;
</code></pre>

<p>}</p>

<p>```</p>

<p>&hellip;And then this factory function could be used to build multiple objects with little code duplication:</p>

<p><code>javascript
var guitar1 = createGuitar("Fender", "Stratocaster", 1963, "electric");
var guitar2 = createGuitar("Gibson", "Hummingbird", 1957, "acoustic");
</code></p>

<p>The problem with the factory pattern is that we can’t identify what type of an object guitar1 or guitar2 is. Change the names of the variables, and it’s even more potentially confusing. That&rsquo;s
where the constructor pattern helps.</p>

<h3>The constructor pattern</h3>

<p>Let&rsquo;s create a function that&mdash;like the factory pattern&mdash;is responsible
for creating our objects. However, let&rsquo;s take advantage of some built-in
features of javascript itself (specifically the <code>new</code> operator and the
<code>this</code> keyword) to be able to identify the object type:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = function() {
    alert(this.brand);
};
</code></pre>

<p>}</p>

<p>var guitar1 = new Guitar(&ldquo;Fender&rdquo;, &ldquo;Stratocaster&rdquo;, 1963, &ldquo;electric&rdquo;);
var guitar2 = new Guitar(&ldquo;Gibson&rdquo;, &ldquo;Hummingbird&rdquo;, 1957, &ldquo;acoustic&rdquo;);
```</p>

<p>Note that this constructor is just a function named Guitar (with an uppercase “G”, as javascript convention dictates). No object being created, the properties and methods are assigned to the “this” object, and no return statement. Calling a constructor with the “new” operator causes four steps:
1. Create a new object.
2. Assign the scope of the constructor to the new object so <code>this</code> points to the new object.
3. Execute the code inside the constructor which adds properties to the new object.
4. Return the new object.</p>

<p>Furthermore, each of these objects has a “constructor” property that points back to the “Guitar” constructor/function. This property was intended for use in identifying the object type:</p>

<p><code>javascript
guitar1.constructor == Guitar // true
guitar2.constructor == Guitar // true
</code></p>

<p>This is an advantage over the Factory pattern. The “instanceof” operator is considered to be a safer way of determining type.</p>

<p>The only difference between javascript “constructors” and other javascript functions is the way they are called (with the <code>new</code> operator).
Any function that is called with the <code>new</code> operator acts as a constructor. So, what if I call it without the <code>new</code> operator? The properties
get added to the <code>window</code> object. <code>this</code> then points to the “Global” object when a function is called in the global scope. Using <code>new</code>
assigns the scope of the function to the new object represented by the variable (<code>var</code>).</p>

<p>So, any possible problems here?</p>

<p>Try this:</p>

<p><code>javascript
console.log(guitar1.getBrand == guitar2.getBrand);
</code></p>

<p>What do you think the result is?</p>

<p>If you said &ldquo;false&rdquo;, give yourself a brownie.
For every object created with a constructor pattern, a new method/function instance is created for each object instance–they are not the same instance of “Function”. The constructor is really doing the following:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = new Function(alert(this.brand));
};
</code></pre>

<p>}
```</p>

<p>For the function/method <code>getBrand</code>, a new Function object
is created every time a new Guitar is created.</p>

<p>We really don’t need two instances of Function that do the same thing. One workaround is to move the function definition outside of the constructor:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = getBrand; // set the getBrand variable to the global
</code></pre>

<p>getBrand() function
}</p>

<p>// getBrand defined here is a global function
function getBrand() {</p>

<pre><code>alert(this.brand);
</code></pre>

<p>};
```</p>

<p>This works, but clutters up the global scope. Think if <code>Guitar</code> had more methods, like <code>getModel</code>, <code>getYear</code>, <code>play</code>, etc.!</p>

<h3>The prototype pattern</h3>

<p>The prototype pattern solves this problem. Every function is created with a <code>prototype</code> property, which is an object containing properties and methods that
should be available to instances of a particular reference type.</p>

<p>Let’s rewrite the previous example to use the prototype pattern:</p>

<p>```javascript
function Guitar() {
}</p>

<p>Guitar.prototype.brand = &ldquo;Fender&rdquo;;
Guitar.prototype.model = &ldquo;Stratocaster&rdquo;;
Guitar.prototype.year = 2006;
Guitar.prototype.type = &ldquo;electric&rdquo;;
Guitar.prototype.getBrand = function() {</p>

<pre><code>alert this.brand;
</code></pre>

<p>}</p>

<p>var guitar1 = new Guitar();
guitar1.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>var guitar2 = new Guitar();
guitar2.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>alert(guitar1.getBrand == guitar2.getBrand);    // true</p>

<p>```</p>

<p>Note that we still call the (now empty) <code>Guitar</code> function as a constructor
to create new guitars and we have the properties and methods present, which
here are shared among instances.</p>

<p><code>guitar1</code> has a property that points to the prototype object. So does <code>guitar2</code>.
(This is known internally as <code>__proto__</code>, which can be examined via the <code>isPrototypeOf()</code> method).
The <code>Guitar</code> constructor function has a member called <code>prototype</code>, which also points to the
prototype object. So,</p>

<ul>
<li><code>guitar1.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>guitar2.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>Guitar.prototype</code> points to <code>Guitar</code>’s prototype object</li>
</ul>


<p>This protoype object has a <code>constructor</code> property. It also has other
properties and methods as defined by the user. This constructor property points back to the <code>constructor</code> function (<code>Guitar</code>).</p>

<p>Here&rsquo;s alternate prototype syntax:</p>

<p>```javascript
function Guitar() {
}</p>

<p>Guitar.prototype = {</p>

<pre><code>constructor : Guitar,
brand : "Fender",
model : "Stratocaster",
year : 2006,
type : "electric",
getBrand = function() {
    alert this.brand;
    }
</code></pre>

<p>};</p>

<p>var guitar1 = new Guitar();
guitar1.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>var guitar2 = new Guitar();
guitar2.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>alert(guitar1.getBrand == guitar2.getBrand);    // true
```</p>

<p>It is important to note that it is not possible to overwrite prototype’s values. In other words, if you add a property to an instance that is the same name as a property on the object’s prototype, you create the property on the instance, which shadows the property on the prototype. For example:</p>

<p><code>javascript
guitar2.brand = "PRS";
guitar2.getBrand();  // PRS
</code></p>

<p>To find a property, the javascript compiler performs a two-Step Search order: First it checks the instance for the property/method. If it’s not found there, it then checks the prototype.</p>

<p>There are some problems with this approach. You can’t pass initialization arguments into the constructor–all instances of the object get the same property values by default.</p>

<p>This kinda blows because typically we don’t want all of our object’s properties to have the same values–we want a guitar that’s a Fender brand, we want one that’s a PRS, etc. And yet we still want to take advantage of having methods shared among the various objects. What we need is a combination of approaches.</p>

<h3>The Constructor/Prototype combination pattern</h3>

<p>In the Constructor/Prototype Combination pattern, the constructor defines instance properties, and the prototype defines methods and shared properties. Best of both worlds, right? To do it,
we take a clue from the alternate prototype syntax described above, and explicitly set the constructor
property on the prototype object to point to our constructor function. However, the only other property we define is the method we want shared. Every other property
goes in the constructor function:</p>

<p>```javascript
function Guitar(brand, model, year, type) {
  this.brand = brand;
  this.model = model;
  this.year = year;
  this.type = type;
}</p>

<p>Guitar.prototype = {</p>

<pre><code>constructor : Guitar,
getBrand : function() {
    alert(this.brand);
</code></pre>

<p>  }
};</p>

<p>var guitar1 = new Guitar(&ldquo;Fender&rdquo;, &ldquo;Stratocaster&rdquo;, 1963, &ldquo;electric&rdquo;);
var guitar2 = new Guitar(&ldquo;Gibson&rdquo;, &ldquo;Hummingbird&rdquo;, 1957, &ldquo;acoustic&rdquo;);</p>

<p>guitar1.getBrand();
guitar2.getBrand();
alert(guitar1.getBrand === guitar2.getBrand);
```</p>

<p>Now we have our cake and eat it, too: We can create guitars passing
in different initialization parameters for each one, and yet all guitars
share the same <code>getBrand</code> method. Great, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook auth with Angularjs and tokens]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens/"/>
    <updated>2014-04-20T19:28:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens</id>
    <content type="html"><![CDATA[<p>(For full example code, see my <a href="https://github.com/jsbalrog/angular-fullstack-tokens">angular-fullstack-tokens repo</a>.)</p>

<p>I have an angular-fullstack based app (angular, node, express, passport),
and I&rsquo;m using token-based authentication following <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">this great blogpost</a>,
rather than cookie-based, using express-jwt and jsonwebtoken.</p>

<p>I started with daftmonk&rsquo;s <a href="https://github.com/DaftMonk/generator-angular-fullstack">angular-fullstack</a>,
replaced its authentication system with tokens (easy enough), then set
out to include social-based authentication for facebook, using passport-
facebook. I kept running into CSRF-prevention issues, with the error
No &lsquo;Access-Control-Allow-Origin&rsquo; header is present on the requested
resource.</p>

<p>Without going too far off topic, this was due to the fact that
I was attempting to make an <code>$http</code> call from the client to a node route
that I had set up for facebook authentication, rather than simply using
an anchor tag href call on the client. Ajax calls are particular tricky
across domain origins. I had to set it up this way because I wanted my
server to return user info of my making back to the client.</p>

<p>I tried solutions outlined <a href="http://matthewtyler.io/handling-oauth2-with-node-js-and-angular-js-passport-to-the-rescue/">here</a>
and <a href="http://scotch.io/tutorials/javascript/easy-node-authentication-facebook">here</a>,
each to no avail. Granted, both were under the &ldquo;cookie-based auth&rdquo; umbrella,
but that shouldn&rsquo;t matter, right?</p>

<p>After searching for nearly two days, I came up with the idea of making
auth request client-side, rather than server-side. Using the <a href="https://github.com/ninjatronic/ngFacebook">ngFacebook</a>
angular module along with <a href="https://github.com/werk85/grunt-ng-constant">grunt-ng-constant</a> gave me the answer I needed.
Here&rsquo;s how to do it.</p>

<!-- more -->


<h3>Client-side auth with ngFacebook</h3>

<p>First, install ngFacebook via Bower:</p>

<p><code>
bower install ngFacebook -save
</code></p>

<p>Then, in your angular app.js (or wherever you do your module&rsquo;s config),
declare &lsquo;facebook&rsquo; as a dependency, and initialize using your Facebook&rsquo;s
app id, thus:</p>

<p>```javascript
angular</p>

<pre><code>.module('my-angularjs-app', ['facebook'])
.config(['$facebookProvider', function($facebookProvider) {
    $facebookProvider.init({
        appId: 'myFbApplicationId'
    });
}]);
</code></pre>

<p>```</p>

<p>(But what about multiple environments? Those FB apps are picky about site URLs.
More on this in the next section&hellip;)</p>

<p>Now, wherever you plan on having the user do the facebook auth, add the proper
button:</p>

<p><code>html
&lt;button type="button" class="btn btn-primary btn-large" data-ng-click="loginFacebook()"&gt;Login with Facebook&lt;/button&gt;
</code>
Next, in your controller, set up calls to do your facebook logins much the
same way you would typically make calls using Facebook&rsquo;s javascript SDK:</p>

<p>```javascript
$scope.loginFacebook = function() {
  $facebook.login({scope:&lsquo;email&rsquo;}).then(function(response) {</p>

<pre><code>$scope.me();
</code></pre>

<p>  },
  function(response) {</p>

<pre><code>console.log("Error!", response);
</code></pre>

<p>  });
};
$scope.me = function() {
  $facebook.api(&lsquo;/me&rsquo;, {fields: &lsquo;id, name, email, username&rsquo;}).then(function(response) {</p>

<pre><code>Auth.loginFacebook(response).then(function() {
  $location.path('/');
});
</code></pre>

<p>  });
};
```</p>

<p>Notice that it&rsquo;s all promised-based goodness. For my purposes, in the result
of my call to &lsquo;/me&rsquo; I&rsquo;m in turn making an <code>$http</code> call to one of my server routes
that I have set up for checking for user info/creating a new user in my own
data store. On a successful return there, I direct the user to the homepage.</p>

<p>For sake of completeness, here&rsquo;s my Auth service method:</p>

<p>```javascript
loginFacebook: function(user, callback) {</p>

<pre><code>  var deferred = $q.defer(),
      cb = callback || angular.noop;
  console.log("here", user);
  $http.post('/login/facebook', user)
    .success(function(data) {
      $window.sessionStorage.token = data.token;
      // Do something with the user here
      deferred.resolve(profile);
    })
    .error(function(data) {
      delete $window.sessionStorage.token;
      // Do something else here
      deferred.reject($rootScope.currentUser);
    });
  return deferred.promise;
}
</code></pre>

<p>```</p>

<p>So, back to that question of different facebook app id&rsquo;s to account for
different environments. grunt-ng-constant to the rescue&hellip;</p>

<h3>Using grunt-ng-constant</h3>

<p>First, let&rsquo;s install grunt-ng-constant:</p>

<p><code>
npm install grunt-ng-constant --save-dev
</code>
Next, in your <code>Gruntfile.js</code>, enter the following:</p>

<p>```javascript
// constants
ngconstant: {
  // Options for all targets
  options: {</p>

<pre><code>name: 'config',
</code></pre>

<p>  },
  // Environment targets
  development: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.app %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_APP_ID'
  }
}
</code></pre>

<p>  },
  production: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.dist %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_PROD_APP_ID'
  }
}
</code></pre>

<p>  }
},
```</p>

<p>This tells grunt to automatically create a file called config.js under
the <code>scripts</code> folder.</p>

<p>How do we tell grunt when to create this file? I put mine in the section
that tells it to run a local server for development. I added it to the run
task of the <code>grunt serve</code> task:</p>

<p>```javascript
grunt.registerTask(&lsquo;serve&rsquo;, function (target) {
  if (target === &lsquo;dist&rsquo;) {</p>

<pre><code>return grunt.task.run(['build', 'connect:dist:keepalive']);
</code></pre>

<p>  }</p>

<p>  grunt.task.run([</p>

<pre><code>'clean:server',
'ngconstant:development',
'bower-install',
'concurrent:server',
'autoprefixer',
'connect:livereload',
'watch'
</code></pre>

<p>  ]);
});
<code>``
And then, for grunt production, I added mine to the</code>grunt build` task:</p>

<p><code>javascript
grunt.registerTask('build', [
  'clean:dist',
  'ngconstant:production',
  'bower-install'
]);
</code></p>

<p>When grunt runs, a config.js file is created:</p>

<p>```javascript
angular.module(&lsquo;config&rsquo;, [])</p>

<p>.constant(&lsquo;ENV&rsquo;, {
  &lsquo;name&rsquo;: &lsquo;facebook&rsquo;,
  &lsquo;appId&rsquo;: &lsquo;your-development-appId&rsquo;
});
```
We need to add this new file to our index.html:</p>

<p>```html</p>

<script src="http://jsbalrog.github.io/scripts/config.js"></script>


<p>```</p>

<p>Now we can inject it into our angular app:</p>

<p><code>javascript
angular.module('myApp', ['ngCookies', 'ngResource', 'ngSanitize', 'ngRoute', 'facebook', 'config']).config(function ($routeProvider, $locationProvider, $httpProvider, $facebookProvider, ENV) {
</code></p>

<p>Finally, in the config of our app (the same place where we init our facebook module),
we use the ENV constant:</p>

<p><code>javascript
$facebookProvider.init({appId: ENV.appId});
</code></p>

<p>And that&rsquo;s it! Now, when you click the &ldquo;Login with Facebook&rdquo; button, the facebook login
popup will show that is the right facebook app for your environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding == Practice]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice/"/>
    <updated>2013-10-19T12:41:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/19/coding-equals-equals-practice</id>
    <content type="html"><![CDATA[<p>In my other life I&rsquo;m a musician&mdash;a guitarist who plays in a band.
I used to tell my guitar students that it takes literally miles
of practice&mdash;DAILY practice&mdash;up and down the guitar fretboard to feel comfortable
improv-ing a solo on the guitar with a band. I could always tell the
students that practiced a little every day versus the ones who thought
they could practice for three hours once a week. The ones who practiced
just minutes every day always improved more rapidly.</p>

<!-- more -->


<p>One of the tools I used in my own daily practice routine was called
<a href="http://www.learn-guitar-online.com/pentatonicpower.html">Pentatonic Power</a>
by Bob Murnahan. The thinking is that musicianship is like language&mdash;
you practice daily on committing to muscle memory the various pieces of
the language&rsquo;s vocabulary, so that you have at your command the ability to combine
those pieces together into interesting ways.</p>

<p>The key here was that practice of these vocabulary pieces was to be a
daily endeavor to be successful. Daily repetition committed the
vocabulary building blocks to muscle memory. For daily repetition to
be possible, it was essential that they were small units of work.</p>

<p>I think the same is true in my software programming life. Just as it
takes miles up and down the fretboard to have command of the instrument,
I believe it takes miles back and forth across the keyboard to master
the vocabulary pieces&mdash;the algorithms and idioms&mdash;of a computer language,
or even of software engineering and problem-solving in general.</p>

<p>Dave Thomas, an important figure in the Ruby Community and Pragmatic
Programming wrote a <a href="http://codekata.pragprog.com/2007/01/code_kata_backg.html#more">blog post</a> several years back on this same idea, but couched within the notion of a &ldquo;kata&rdquo;, where
the value of practice is emphasized when learning a creative process. He says,</p>

<p>&ldquo;&hellip;see if you can carve out 45 to 60 minutes to play with a small
piece of code. You don’t necessarily have to look at performance:
perhaps you could play with the structure, or the memory use, or the
interface. In the end it doesn’t matter. Experiment, measure, improve.</p>

<p>Practice."</p>

<p>I didn&rsquo;t have the benefit of the hours of practice that naturally are a
result of being a computer science major in university while completing class assignments.
I had to make up for it on my own with daily practice. Dave&rsquo;s suggestions ring true. If I can take 30-60 minutes
every day to code a solution to a problem, I find that coding is more
embedded in my &ldquo;muscle memory&rdquo;, and it makes me a better on-the-job
programmer.</p>

<p>To that end, I have always been looking for &ldquo;exercises&rdquo; to add to my
daily routine. The aforementioned blog offers several suggestions as katas,
and there are links to the <a href="http://rubyquiz.com/">Ruby Quiz</a> as well. The language typically doesn&rsquo;t
matter, as most translate to any programming language you choose. The point
is to get your brain and your fingers adept at solving problems in code.</p>

<p>What other lists of coding exercises have people discovered useful?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promises in Angular.js]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js/"/>
    <updated>2013-10-17T21:43:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/promises-in-angular-dot-js</id>
    <content type="html"><![CDATA[<p>One of the hardest things for me to grok in JavaScript was promise-based style
handling of the async nature of the language.
I understood the async JavaScript just fine, and could wield callbacks
like a banshee. However, promise-based structures provided a more elegant solution
than callbacks&mdash;particularly when you were several calls deep. I will describe
what I learned in the context of Angular, as it has a very simple yet elegant
implementation of promises in its $q library.</p>

<!-- more -->


<p>First, imagine we have a function for a person. We will define two callbacks for
this person: one for what success for them would be, and one for what their
life&rsquo;s error condition would look like. We&rsquo;ll assume they are either happy or
sad:</p>

<p>```javascript
var Person = function(name) {
  this.success = function(reason) {</p>

<pre><code>console.log(name + " is happy because " + reason);
</code></pre>

<p>  };</p>

<p>  this.error = function(reason) {</p>

<pre><code>console.log(name + " is sad because " + reason);
</code></pre>

<p>  };
};
```</p>

<p>Next, we&rsquo;ll create this person:</p>

<p><code>javascript
var fred = new Person("Fred");
</code></p>

<p>We now need to define a task that needs to be accomplished in the future. We&rsquo;ll
say it&rsquo;s a delivery of shiny new roller stakes from Amazon. Receiving them
would be a success, and thus make Fred happy. Having them not delivered would
be an error, and thus make Fred really sad.</p>

<p>To do so, we&rsquo;ll create a task using $q&rsquo;s defer() method. This creates a
deferred object, which holds the future task execution:</p>

<p><code>javascript
var task = $q.defer();
</code></p>

<p>This future task object has a promise object as a property; it is the placeholder
for the results of the task&rsquo;s execution:</p>

<p><code>javascript
var results = task.promise;
</code>
We then set up the order of events, using &ldquo;promise, then&rdquo; syntax. This takes the
place of passing callback(s) to the task method, and having the task method have to call
them when complete.</p>

<p><code>javascript
results.then(fred.success, fred.error);
</code>
We can then have the task programmatically succeed or fail depending on whatever
arbitrary logic we choose. $q&rsquo;s parlance is &ldquo;resolve&rdquo; or &ldquo;reject&rdquo;.</p>

<p>If we succeed:</p>

<p><code>javascript
task.resolve("Roller skates from Amazon have arrived");
</code>
&hellip;the appropriate &ldquo;happy&rdquo; success method is called. Conversely, if we fail:</p>

<p><code>javascript
task.reject("Roller skates from Amazon are backordered");
</code>
&hellip;the appropriate &ldquo;sad&rdquo; error method is called.</p>

<p>This is a pretty simple example, one that maybe unneccessarily takes on a lot of
overhead for promises. But you can see how if we now introduce other objects&mdash;say
an Amazon online store that has takeOrder, deliverOrder, and problemWithOrder
methods&mdash;using promises could avoid multiple levels of callback heck. The takeOrder
method could take an argument of ordered items, and set up a current order that
had an items property as well as a task deferred object. Instead of returning the
order, it simply returns the promise property of the task deferred object, which
is used to call then() on:</p>

<p><code>javascript
var amazon = new MailOrder($q);
var itemDelivered = amazon.takeOrder('Nexus 7');
itemDelivered.then(fred.success, fred.error);
amazon.problemWithOrder('Nexus 7 is no longer in stock!');
</code>
<em>edit:</em> After writing this post I came across one written at the same time, but better, and with a better metaphor.
See <a href="http://andyshora.com/promises-angularjs-explained-as-cartoon.html">&ldquo;Promises in AngularJS, Explained as a Cartoon&rdquo;</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Closures In Javascript]]></title>
    <link href="http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript/"/>
    <updated>2013-10-17T09:06:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2013/10/17/understanding-closures-in-javascript</id>
    <content type="html"><![CDATA[<p>Closures are a common point of confusion for the JavaScript-uninitiated. Recently, a came across a couple-years-old
post on the topic. I think it covers the subject well: check out Angus Croll&rsquo;s &ldquo;<a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">Understanding JavaScript Closures</a>&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
