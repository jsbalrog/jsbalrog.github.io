<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | JS Balrog]]></title>
  <link href="http://jsbalrog.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://jsbalrog.github.io/"/>
  <updated>2014-10-09T11:18:27-06:00</updated>
  <id>http://jsbalrog.github.io/</id>
  <author>
    <name><![CDATA[Ted Jenkins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angularjs providers, factories, and services]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/07/angularjs-providers/"/>
    <updated>2014-10-07T17:04:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/07/angularjs-providers</id>
    <content type="html"><![CDATA[<p>When it comes to objects&mdash;and especially singleton objects or factory instances&mdash;angular
offerings are multiple-choice. I want to spell out the differences between
angular-specific providers, services, and factories, and give some guidelines to
when you would use each.</p>

<!-- more -->


<h3>Providers</h3>

<p>At root, all three types of objects basically are providers. <code>angular.service</code> and
<code>angular.factory</code> are syntactic sugar on top of <code>angular.provider</code>. That said, you
should really prefer using a <code>service</code> or a <code>factory</code> (more on these below); use
a <code>provider</code> only when you want to expose an API that you need to access in your
angular module&rsquo;s <code>config</code> block, before the app starts. For example, you may
have a reuseable service for which you want to modify the behavior between
applications.</p>

<p>Let&rsquo;s look at a concrete example. Let&rsquo;s say I have an app that has the requirement
of specifying a different language depending on the app instance that is
running&mdash;the app running on the servers in Japan, for example, must specify
japanese as the app&rsquo;s language. The default language, if no config is
specified, is english. I know, it&rsquo;s pretty contrived&mdash;but hey, I don&rsquo;t write
the requirements, I just implement them.</p>

<p>Here&rsquo;s what our provider looks like:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;, []).provider(&lsquo;languageSetter&rsquo;, function() {</p>

<pre><code>this.lang = 'english';
</code></pre>

<p>  this.$get = function() {</p>

<pre><code>var lang = this.lang;
return {
  getLang: function() {
    return lang;
  }
};
</code></pre>

<p>  };</p>

<p>  this.setLang = function(lang) {</p>

<pre><code>this.lang = lang;
</code></pre>

<p>  };
})
```</p>

<p>The key here is the $get function&mdash;this returns an object that exposes the
API for the app to use at runtime&mdash;in this case <code>getLang</code> is available to
call within an arbitrary controller, etc.</p>

<p>Moreover&mdash;and here&rsquo;s the important thing&mdash;the <code>setLang</code> method is callable
in the app&rsquo;s config block.</p>

<p>So, our app&rsquo;s config code can look like this:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).config(function(languageSetterProvider){</p>

<pre><code>// Configuring a provider
languageSetterProvider.setLang('japanese');
</code></pre>

<p>});
```</p>

<p>Notice that we have to append &ldquo;Provider&rdquo; onto the end of the name of our provider
to be injected into our <code>config</code> function. According to the angular docs, &ldquo;This
injection is done by a provider injector which is different from the regular instance
injector, in that it instantiates and wires (injects) all provider instances only.&rdquo;</p>

<p>During bootstrap of our application, Angular configures and instantiates all providers
during the configuration phase before it moves on to create our services (in the run phase).
Therefore, services aren&rsquo;t yet available. This means that any pre-run configuration
(like our language configuration here) is a prime candidate to be thrown into a provider.</p>

<p>Here&rsquo;s a controller, for sake of completion:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;MyCtrl&rsquo;, function($scope, languageSetter) {</p>

<p>  $scope.languages = [</p>

<pre><code>languageSetter.getLang()
</code></pre>

<p>  ];
});
```</p>

<p>&hellip;and then we can show off our language in an admittedly contrived manner:</p>

<p>
``` html
&hellip;</p>

<div ng-app="myApp">
  <div ng-controller="MyCtrl">
    {{ languages }}
  </div>
</div>


<p>&hellip;
```
</p>

<p>Even though our default language is &ldquo;english&rdquo;, during the app config we set the
language to &ldquo;japanese&rdquo; using our provider.</p>

<h3>Factories</h3>

<p>An Angular factory constructs a new service&hellip;Wait&mdash;what? Yes, even though Angular has
a separate Service recipe, the Angular factory recipe is for providing a singleton
service. The nice thing about a factory is that it&rsquo;s very easy to use (think JavaScript
revealing module pattern), it can have other services dependency injected, and can
be lazily initialized.</p>

<p>To continue our example, let&rsquo;s say that a marketing scheme is to be computed based on
the language that is now stored in the browser&rsquo;s local storage for our app. Here&rsquo;s what
the factory service looks like:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).factory(&lsquo;languageFactory&rsquo;, function() {</p>

<pre><code>var schemify = function(lang) {
    return lang + " marketing scheme--activate!";
};

var getScheme = function() {
    var lang = window.localStorage.getItem('language');
    return schemify(lang);
};
</code></pre>

<p>  return {</p>

<pre><code>getScheme: getScheme
</code></pre>

<p>  };
});
```</p>

<p>&hellip;and then we can inject our factory (service) in our controller, and it will be
lazily instantiated as a singleton:</p>

<p><code>js
angular.module('myApp').controller('MyCtrl', function($scope, languageFactory) {    
  $scope.marketingScheme = languageFactory.getScheme();
});
</code></p>

<p>Notice that we do not have access to our Factory in the config block of our app; it is
not yet instantiated at that point.</p>

<h3>Services</h3>

<p>So, we know so far that a Provider is a service, and a Factory is a service. Not to
mess with you, but a Service is a service as well. Here&rsquo;s what the Angular documentation
says on the topic: &ldquo;Yes, we have called one of our service recipes &lsquo;Service&rsquo;. We regret
this and know that we&rsquo;ll be somehow punished for our misdeed. It&rsquo;s like we named one of
our offspring &lsquo;Child&rsquo;. Boy, that would mess with the teachers.&rdquo;</p>

<p>So now you know. Hopefully we can avoid some confusion. The Service recipe provides a
service just like Factory does, but the difference is that it invokes a constructor with
the JavaScript <code>new</code> operator. The arguments passed to the constructor represent
dependencies needed by instance of this type.</p>

<p>To extend our example once more, let&rsquo;s see what our factory service would look like re-
written as a service, ah, service:</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;, []).service(&lsquo;languageService&rsquo;, function() {
  this.schemify = function(lang) {</p>

<pre><code>return lang + " marketing scheme--activate!";
</code></pre>

<p>  };</p>

<p>  this.getScheme = function() {</p>

<pre><code>var lang = 'portuguese';
    return this.schemify(lang);
</code></pre>

<p>  };
});
```</p>

<p>Looks pretty familiar, doesn&rsquo;t it? We&rsquo;re not doing the public/private thing with methods
here, just defining them on the <code>this</code> scope, like we would in a plain ol' JavaScript
constructor. Our controller really doesn&rsquo;t change much.</p>

<p>So, why the difference? Well, in practice, let me say that I use the Factory recipe far
more than the Service recipe. I like being able to specify what methods are exposed as
callable in the return block. Must be some remnant of my old Java public/private days.
I really don&rsquo;t find much use for the Service recipe&mdash;can&rsquo;t see what it buys me. I have
used the Provider recipe a couple of times when I do need to do some configuration in
my app, before it hits the run phase. But again, Factory is far and away what I use most.</p>

<p>Hope this helps clear up some of the confusion between these three services. Of course,
there are also <code>Value</code> and <code>Constant</code>, but those are topics for another day&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talkin' 'bout angular directives]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives/"/>
    <updated>2014-10-03T15:37:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/10/03/talkin-bout-angular-directives</id>
    <content type="html"><![CDATA[<p>In this post, let’s take a look at the power of directives, and in particular,
the power of isolate scope-based directives.</p>

<!-- more -->


<h3>In the beginning</h3>

<p>Let’s start with this use case: I’ve got a list of friends and I want to list out
their name and their hobby. The html looks like this:</p>

<p>
``` html</p>

<div ng-controller=“MyCtrl as main”>
  <ul>
    <li ng-repeat=“friend in main.friends”>My name is {{ friend.name }}, I play the {{ friend.hobby }}.</li>
  </ul>
</div>


<p>```
</p>

<p>&hellip;And here&rsquo;s the controller:</p>

<p>``` js
angular.module(‘myApp’, [])
  .controller(‘MyCtrl’, function() {</p>

<pre><code> this.friends = [
      { ‘name’: ‘Fred’, ‘hobby’: ‘kazoo’ },
      { ‘name’: ‘Eliot’, ‘hobby’: ‘harp’ }
 ];
</code></pre>

<p>});
```</p>

<p>Pretty straightforward. Well, let&rsquo;s add to the use case: I want to be able to
“cool-i-fy” any friend in the list by clicking them—no matter who I click,
I want their name to be upgraded to “B.B. King” and their hobby upgraded to
“guitar”. Instant coolness!</p>

<p>So, I do something like this:</p>

<p>
<code>html
&lt;li ng-repeat=“friend in main.friends” ng-click=“main.coolifyMe(friend)”&gt;My name is {{ friend.name }}, I play the {{ friend.hobby }}.&lt;/li&gt;
...
</code>
</p>

<p>&hellip;and the corresponding method in the controller:</p>

<p>``` js
this.coolifyMe = function(friend) {</p>

<pre><code> friend.name = “B.B. King”;
 friend.hobby = “guitar”;
</code></pre>

<p>};
```</p>

<p>Still straightforward, and works well.</p>

<h3>Enter: A custom directive</h3>

<p>But wait, I want this to be available throughout my app,
anywhere I’ve got a list of friends. And I show a list of friends 24 different places.
Sounds like a job for a reusable custom directive!</p>

<p>So, I’m going to create a directive, coolnessDir, that can be reused anywhere.
Here’s what the html looks like:</p>

<p>
``` html</p>

<div ng-controller=“MyCtrl as main”>
  <ul>
    <coolness-dir></coolness-dir>
  </ul>
</div>


<p>```
</p>

<p>Nice, neat, compact html, which is what angular directives are awesome for. Here’s
our directive:</p>

<p>``` js
.directive(‘coolnessDir’, function() {
  return {</p>

<pre><code>restrict: ‘E’,
replace: true,
template: ‘&lt;li ng-repeat=“friend in main.friends” ng-click=“coolifyMe(friend)”&gt;My name is , I play the .&lt;/li&gt;’,
link: function(scope, elem, attrs) {
  scope.coolifyMe = function(friend) {
    friend.name = “B.B. King”;
    friend.hobby = “guitar”;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>I rip the <code>coolifyMe</code> function out of the controller altogether. Notice that the <code>coolifyMe</code>
method in the directive’s <code>link</code> function (I have a <code>link</code> function because we’re manipulating
  the DOM) looks nearly identical to our old method.</p>

<p>Okay, everything’s good. Works like a champ.</p>

<h3>A problem arises</h3>

<p>But wait. There is a list where I want to use this directive, but it&rsquo;s controller defines
the list as follows:</p>

<p>``` js
this.enemies = [</p>

<pre><code>{ 'name': 'Ted', 'hobby': 'kazoo' },
{ 'name': 'Charlie', 'hobby': 'harp' }
</code></pre>

<p>  ];
```</p>

<p>What’s this <code>enemies</code> business? My directive code template refers to <code>friends</code> in
its template&mdash;this will break!</p>

<h3>Isolate scope to the rescue!</h3>

<p>Isolate scope comes to the rescue here—it allows us to seal off the directive from
 the enclosing scope(s), and “poke holes” selectively to allow certain values through,
 while also allowing us to redefine those values. We’re going to make sure that whatever
 value gets through to our directive’s template, it’s called <code>friend</code>!</p>

<p>First, here’s what our html looks like:</p>

<p>
``` html
&hellip;</p>

<ul>
     <coolness-dir friends=“main.enemies”></coolness-dir>
</ul>


<p>&hellip;
```
</p>

<p>Notice that we added an attribute to our directive: <code>friends</code>. This is the hole
through to the directive. Speaking of which, here’s the code now:</p>

<p>``` js
.directive(‘coolnessDir’, function() {
  return {</p>

<pre><code>restrict: ‘E’,
replace: true,
scope: {
  friends: ‘=‘
},
template: ‘&lt;li ng-repeat="friend in friends" ng-click=“coolifyMe(friend)”&gt;My name is , I play the .&lt;/li&gt;’,
link: function(scope, elem, attrs) {
  scope.coolifyMe = function(friend) {
    friend.name = “B.B. King”;
    friend.hobby = “guitar”;
  }
}
</code></pre>

<p>  }
});
```</p>

<p>Notice how we have a scope property now, and we define a key <code>friends</code>, which matches
our attribute name that we added. The equals sign says “we want to two-way data
bind this, and furthermore, do it as the same name: <code>friends</code>&ldquo;.</p>

<p>Now, we can easily use this directive wherever—-all we need to do is change the
attribute <code>friends=</code> to be whatever the controller sets the value of the list to.
This insulates our usage of <code>friends</code> in our directive from breaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorator pattern in JavaScript]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/08/15/decorator-pattern-in-javascript/"/>
    <updated>2014-08-15T12:29:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/08/15/decorator-pattern-in-javascript</id>
    <content type="html"><![CDATA[<p>Last time I mentioned I was going to focus on some OO-related javascript concerns.
For this post, I want to talk about a programming pattern that I use quite often:
the Decorator pattern.</p>

<!-- more -->


<p>The Decorator pattern is defined as &ldquo;a design pattern that allows behavior to be
added to an individual object, either statically or dynammically, without affecting
the behavior of other objects from the same class.&rdquo; <a href="https://http://en.wikipedia.org/wiki/Decorator_pattern">(source)</a></p>

<p>What this means in plain english is that we can extend an object&rsquo;s functionality&mdash;
even at runtime&mdash;and even with multiple decorators. This is pretty common in the
&lsquo;classical&rsquo; OO world of, say, java. Here&rsquo;s how we&rsquo;d do it prototypically in
javascript.</p>

<p>Let&rsquo;s say that we&rsquo;ve got a Guitar store shopping cart written in javascript. At
checkout time the user can select various options or upgrades to add to their
guitar. We will implement these options as decorators.</p>

<p>First, the guitar model. It will manage a list of decorators. Here&rsquo;s the constructor:</p>

<p>```javascript
function Guitar(price) {</p>

<pre><code>this.price = price || 699;
this.decoratorsList = [];
</code></pre>

<p>}
```</p>

<p>Next, the decorators themselves. Decorators will be implemented as properties of
<code>Guitar.decorators</code>.</p>

<p><code>javascript
Guitar.decorators = {};
</code></p>

<p>Now, we add the various decorator properties. These are the options/upgrades the
user can select.</p>

<p>```javascript
// Ebony fretboard option: $100
Guitar.decorators.ebonyFretboard = {
  getPrice: function(price) {</p>

<pre><code>return price + 100;
</code></pre>

<p>  }
};</p>

<p>// Mother of pearl inlay option: $75
Guitar.decorators.motherOfPearlInlays = {
  getPrice: function(price) {</p>

<pre><code>return price + 75;
</code></pre>

<p>  }
};</p>

<p>// Gold hardware option: $50
Guitar.decorators.goldHardware = {
  getPrice: function(price) {</p>

<pre><code>return price + 50;
</code></pre>

<p>  }
};
```</p>

<p>Here&rsquo;s the Guitar&rsquo;s decorate method. This is the method called at runtime, and
it simply pushes each decorator onto the guitar&rsquo;s <code>decoratorList</code>.</p>

<p><code>javascript
Guitar.prototype.decorate = function(decorator) {
  this.decoratorsList.push(decorator);
  return this;
};
</code></p>

<p>Notice that we return the guitar instance. This is so we can chain decorator calls.</p>

<p>Finally, our <code>getPrice()</code> method for our shopping cart checkout. It simply goes
through a list of decorators and calls each decorator&rsquo;s <code>getPrice()</code> method, passing
the results from the previous call.</p>

<p>```javascript
Guitar.prototype.getPrice = function() {
  var price = this.price,</p>

<pre><code>i,
max = this.decoratorsList.length,
name;
</code></pre>

<p>  for (i = 0; i &lt; max; i++) {</p>

<pre><code>name = this.decoratorsList[i];
price = Guitar.decorators[name].getPrice(price);
</code></pre>

<p>  }
  return price;
};
```</p>

<p>That&rsquo;s all there is to it. Here&rsquo;s the client code in action. We&rsquo;ll create a couple
of guitars and print out the price.</p>

<p>```javascript
var fender = new Guitar(499);
fender.decorate(&lsquo;goldHardware&rsquo;);
console.log(fender.getPrice()); // 549</p>

<p>var takamine = new Guitar();
takamine.decorate(&lsquo;motherOfPearlInlays&rsquo;).decorate(&lsquo;ebonyFretboard&rsquo;);
console.log(takamine.getPrice()); // 874
```</p>

<p>This ought to whet your appetite for finding other uses for the decorator pattern
in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OO javascript: Creating objects]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects/"/>
    <updated>2014-07-16T07:35:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/07/16/oo-javascript-creating-objects</id>
    <content type="html"><![CDATA[<p>For a few posts we’ll talk a bit about programming javascript in such a way as to take advantage of OO principles of reuse, including encapsulation,
inheritance, and polymorphism. Javascript of course has no concept of such things as classes; therefore, we use common javascript principles in order to
take advantage of such things–even for how we define a javascript “object”.
This post in particular will focus on javascript object creation.</p>

<!-- more -->


<p>There really is no way to define a class in javascript. ECMA-262 defines an object as an “unordered collection of properties each of which contains a
primitive value, object, or function.” As such, a javascript object is really nothing more than an array of values (which could be any combination of
primitives, other objects, or functions) that are named. This means that an object in javascript is more closely aligned to what I as a traditional
OO-language developer think of as a hash table or a map–a grouping of name-value pairs.</p>

<h3>Creating objects</h3>

<p>Here’s how you’d typically create an object in javascript:</p>

<p>```javascript
var guitar = new Object();
guitar.brand = &ldquo;Fender&rdquo;;
guitar.model = &ldquo;Stratocaster&rdquo;;
guitar.year = 1963;
guitar.type = &ldquo;Electric&rdquo;;</p>

<p>guitar.getBrand = function() {</p>

<pre><code>alert(this.brand);
</code></pre>

<p>};
```
Looks good. The problem with this traditional approach is that if you were to create multiple guitar objects, you’d be duplicating a lot of code. Dang! This is where programming patterns can help.</p>

<h3>The factory pattern</h3>

<p>Let&rsquo;s set up a bit of code that acts like a factory&mdash;in other
words, it is responsible for creating a guitar whenever we call it.
We&rsquo;ll call it <code>createGuitar</code>:</p>

<p>```javascript
function createGuitar(brand, model, year, type) {</p>

<pre><code>var o = new Object();
o.brand = brand;
o.model = model;
o.year = year;
o.type = type;

o.getBrand = function() {
    alert(this.brand);
};
return o;
</code></pre>

<p>}</p>

<p>```</p>

<p>&hellip;And then this factory function could be used to build multiple objects with little code duplication:</p>

<p><code>javascript
var guitar1 = createGuitar("Fender", "Stratocaster", 1963, "electric");
var guitar2 = createGuitar("Gibson", "Hummingbird", 1957, "acoustic");
</code></p>

<p>The problem with the factory pattern is that we can’t identify what type of an object guitar1 or guitar2 is. Change the names of the variables, and it’s even more potentially confusing. That&rsquo;s
where the constructor pattern helps.</p>

<h3>The constructor pattern</h3>

<p>Let&rsquo;s create a function that&mdash;like the factory pattern&mdash;is responsible
for creating our objects. However, let&rsquo;s take advantage of some built-in
features of javascript itself (specifically the <code>new</code> operator and the
<code>this</code> keyword) to be able to identify the object type:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = function() {
    alert(this.brand);
};
</code></pre>

<p>}</p>

<p>var guitar1 = new Guitar(&ldquo;Fender&rdquo;, &ldquo;Stratocaster&rdquo;, 1963, &ldquo;electric&rdquo;);
var guitar2 = new Guitar(&ldquo;Gibson&rdquo;, &ldquo;Hummingbird&rdquo;, 1957, &ldquo;acoustic&rdquo;);
```</p>

<p>Note that this constructor is just a function named Guitar (with an uppercase “G”, as javascript convention dictates). No object being created, the properties and methods are assigned to the “this” object, and no return statement. Calling a constructor with the “new” operator causes four steps:
1. Create a new object.
2. Assign the scope of the constructor to the new object so <code>this</code> points to the new object.
3. Execute the code inside the constructor which adds properties to the new object.
4. Return the new object.</p>

<p>Furthermore, each of these objects has a “constructor” property that points back to the “Guitar” constructor/function. This property was intended for use in identifying the object type:</p>

<p><code>javascript
guitar1.constructor == Guitar // true
guitar2.constructor == Guitar // true
</code></p>

<p>This is an advantage over the Factory pattern. The “instanceof” operator is considered to be a safer way of determining type.</p>

<p>The only difference between javascript “constructors” and other javascript functions is the way they are called (with the <code>new</code> operator).
Any function that is called with the <code>new</code> operator acts as a constructor. So, what if I call it without the <code>new</code> operator? The properties
get added to the <code>window</code> object. <code>this</code> then points to the “Global” object when a function is called in the global scope. Using <code>new</code>
assigns the scope of the function to the new object represented by the variable (<code>var</code>).</p>

<p>So, any possible problems here?</p>

<p>Try this:</p>

<p><code>javascript
console.log(guitar1.getBrand == guitar2.getBrand);
</code></p>

<p>What do you think the result is?</p>

<p>If you said &ldquo;false&rdquo;, give yourself a brownie.
For every object created with a constructor pattern, a new method/function instance is created for each object instance–they are not the same instance of “Function”. The constructor is really doing the following:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = new Function(alert(this.brand));
};
</code></pre>

<p>}
```</p>

<p>For the function/method <code>getBrand</code>, a new Function object
is created every time a new Guitar is created.</p>

<p>We really don’t need two instances of Function that do the same thing. One workaround is to move the function definition outside of the constructor:</p>

<p>```javascript
function Guitar(brand, model, year, type) {</p>

<pre><code>this.brand = brand;
this.model = model;
this.year = year;
this.type = type;
this.getBrand = getBrand; // set the getBrand variable to the global
</code></pre>

<p>getBrand() function
}</p>

<p>// getBrand defined here is a global function
function getBrand() {</p>

<pre><code>alert(this.brand);
</code></pre>

<p>};
```</p>

<p>This works, but clutters up the global scope. Think if <code>Guitar</code> had more methods, like <code>getModel</code>, <code>getYear</code>, <code>play</code>, etc.!</p>

<h3>The prototype pattern</h3>

<p>The prototype pattern solves this problem. Every function is created with a <code>prototype</code> property, which is an object containing properties and methods that
should be available to instances of a particular reference type.</p>

<p>Let’s rewrite the previous example to use the prototype pattern:</p>

<p>```javascript
function Guitar() {
}</p>

<p>Guitar.prototype.brand = &ldquo;Fender&rdquo;;
Guitar.prototype.model = &ldquo;Stratocaster&rdquo;;
Guitar.prototype.year = 2006;
Guitar.prototype.type = &ldquo;electric&rdquo;;
Guitar.prototype.getBrand = function() {</p>

<pre><code>alert this.brand;
</code></pre>

<p>}</p>

<p>var guitar1 = new Guitar();
guitar1.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>var guitar2 = new Guitar();
guitar2.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>alert(guitar1.getBrand == guitar2.getBrand);    // true</p>

<p>```</p>

<p>Note that we still call the (now empty) <code>Guitar</code> function as a constructor
to create new guitars and we have the properties and methods present, which
here are shared among instances.</p>

<p><code>guitar1</code> has a property that points to the prototype object. So does <code>guitar2</code>.
(This is known internally as <code>__proto__</code>, which can be examined via the <code>isPrototypeOf()</code> method).
The <code>Guitar</code> constructor function has a member called <code>prototype</code>, which also points to the
prototype object. So,</p>

<ul>
<li><code>guitar1.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>guitar2.__proto__</code> points to <code>Guitar</code>’s prototype object</li>
<li><code>Guitar.prototype</code> points to <code>Guitar</code>’s prototype object</li>
</ul>


<p>This protoype object has a <code>constructor</code> property. It also has other
properties and methods as defined by the user. This constructor property points back to the <code>constructor</code> function (<code>Guitar</code>).</p>

<p>Here&rsquo;s alternate prototype syntax:</p>

<p>```javascript
function Guitar() {
}</p>

<p>Guitar.prototype = {</p>

<pre><code>constructor : Guitar,
brand : "Fender",
model : "Stratocaster",
year : 2006,
type : "electric",
getBrand = function() {
    alert this.brand;
    }
</code></pre>

<p>};</p>

<p>var guitar1 = new Guitar();
guitar1.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>var guitar2 = new Guitar();
guitar2.getBrand();     // &ldquo;Fender&rdquo;</p>

<p>alert(guitar1.getBrand == guitar2.getBrand);    // true
```</p>

<p>It is important to note that it is not possible to overwrite prototype’s values. In other words, if you add a property to an instance that is the same name as a property on the object’s prototype, you create the property on the instance, which shadows the property on the prototype. For example:</p>

<p><code>javascript
guitar2.brand = "PRS";
guitar2.getBrand();  // PRS
</code></p>

<p>To find a property, the javascript compiler performs a two-Step Search order: First it checks the instance for the property/method. If it’s not found there, it then checks the prototype.</p>

<p>There are some problems with this approach. You can’t pass initialization arguments into the constructor–all instances of the object get the same property values by default.</p>

<p>This kinda blows because typically we don’t want all of our object’s properties to have the same values–we want a guitar that’s a Fender brand, we want one that’s a PRS, etc. And yet we still want to take advantage of having methods shared among the various objects. What we need is a combination of approaches.</p>

<h3>The Constructor/Prototype combination pattern</h3>

<p>In the Constructor/Prototype Combination pattern, the constructor defines instance properties, and the prototype defines methods and shared properties. Best of both worlds, right? To do it,
we take a clue from the alternate prototype syntax described above, and explicitly set the constructor
property on the prototype object to point to our constructor function. However, the only other property we define is the method we want shared. Every other property
goes in the constructor function:</p>

<p>```javascript
function Guitar(brand, model, year, type) {
  this.brand = brand;
  this.model = model;
  this.year = year;
  this.type = type;
}</p>

<p>Guitar.prototype = {</p>

<pre><code>constructor : Guitar,
getBrand : function() {
    alert(this.brand);
</code></pre>

<p>  }
};</p>

<p>var guitar1 = new Guitar(&ldquo;Fender&rdquo;, &ldquo;Stratocaster&rdquo;, 1963, &ldquo;electric&rdquo;);
var guitar2 = new Guitar(&ldquo;Gibson&rdquo;, &ldquo;Hummingbird&rdquo;, 1957, &ldquo;acoustic&rdquo;);</p>

<p>guitar1.getBrand();
guitar2.getBrand();
alert(guitar1.getBrand === guitar2.getBrand);
```</p>

<p>Now we have our cake and eat it, too: We can create guitars passing
in different initialization parameters for each one, and yet all guitars
share the same <code>getBrand</code> method. Great, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook auth with Angularjs and tokens]]></title>
    <link href="http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens/"/>
    <updated>2014-04-20T19:28:00-06:00</updated>
    <id>http://jsbalrog.github.io/blog/2014/04/20/facebook-auth-with-angularjs-and-tokens</id>
    <content type="html"><![CDATA[<p>(For full example code, see my <a href="https://github.com/jsbalrog/angular-fullstack-tokens">angular-fullstack-tokens repo</a>.)</p>

<p>I have an angular-fullstack based app (angular, node, express, passport),
and I&rsquo;m using token-based authentication following <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">this great blogpost</a>,
rather than cookie-based, using express-jwt and jsonwebtoken.</p>

<p>I started with daftmonk&rsquo;s <a href="https://github.com/DaftMonk/generator-angular-fullstack">angular-fullstack</a>,
replaced its authentication system with tokens (easy enough), then set
out to include social-based authentication for facebook, using passport-
facebook. I kept running into CSRF-prevention issues, with the error
No &lsquo;Access-Control-Allow-Origin&rsquo; header is present on the requested
resource.</p>

<p>Without going too far off topic, this was due to the fact that
I was attempting to make an <code>$http</code> call from the client to a node route
that I had set up for facebook authentication, rather than simply using
an anchor tag href call on the client. Ajax calls are particular tricky
across domain origins. I had to set it up this way because I wanted my
server to return user info of my making back to the client.</p>

<p>I tried solutions outlined <a href="http://matthewtyler.io/handling-oauth2-with-node-js-and-angular-js-passport-to-the-rescue/">here</a>
and <a href="http://scotch.io/tutorials/javascript/easy-node-authentication-facebook">here</a>,
each to no avail. Granted, both were under the &ldquo;cookie-based auth&rdquo; umbrella,
but that shouldn&rsquo;t matter, right?</p>

<p>After searching for nearly two days, I came up with the idea of making
auth request client-side, rather than server-side. Using the <a href="https://github.com/ninjatronic/ngFacebook">ngFacebook</a>
angular module along with <a href="https://github.com/werk85/grunt-ng-constant">grunt-ng-constant</a> gave me the answer I needed.
Here&rsquo;s how to do it.</p>

<!-- more -->


<h3>Client-side auth with ngFacebook</h3>

<p>First, install ngFacebook via Bower:</p>

<p><code>
bower install ngFacebook -save
</code></p>

<p>Then, in your angular app.js (or wherever you do your module&rsquo;s config),
declare &lsquo;facebook&rsquo; as a dependency, and initialize using your Facebook&rsquo;s
app id, thus:</p>

<p>```javascript
angular</p>

<pre><code>.module('my-angularjs-app', ['facebook'])
.config(['$facebookProvider', function($facebookProvider) {
    $facebookProvider.init({
        appId: 'myFbApplicationId'
    });
}]);
</code></pre>

<p>```</p>

<p>(But what about multiple environments? Those FB apps are picky about site URLs.
More on this in the next section&hellip;)</p>

<p>Now, wherever you plan on having the user do the facebook auth, add the proper
button:</p>

<p><code>html
&lt;button type="button" class="btn btn-primary btn-large" data-ng-click="loginFacebook()"&gt;Login with Facebook&lt;/button&gt;
</code>
Next, in your controller, set up calls to do your facebook logins much the
same way you would typically make calls using Facebook&rsquo;s javascript SDK:</p>

<p>```javascript
$scope.loginFacebook = function() {
  $facebook.login({scope:&lsquo;email&rsquo;}).then(function(response) {</p>

<pre><code>$scope.me();
</code></pre>

<p>  },
  function(response) {</p>

<pre><code>console.log("Error!", response);
</code></pre>

<p>  });
};
$scope.me = function() {
  $facebook.api(&lsquo;/me&rsquo;, {fields: &lsquo;id, name, email, username&rsquo;}).then(function(response) {</p>

<pre><code>Auth.loginFacebook(response).then(function() {
  $location.path('/');
});
</code></pre>

<p>  });
};
```</p>

<p>Notice that it&rsquo;s all promised-based goodness. For my purposes, in the result
of my call to &lsquo;/me&rsquo; I&rsquo;m in turn making an <code>$http</code> call to one of my server routes
that I have set up for checking for user info/creating a new user in my own
data store. On a successful return there, I direct the user to the homepage.</p>

<p>For sake of completeness, here&rsquo;s my Auth service method:</p>

<p>```javascript
loginFacebook: function(user, callback) {</p>

<pre><code>  var deferred = $q.defer(),
      cb = callback || angular.noop;
  console.log("here", user);
  $http.post('/login/facebook', user)
    .success(function(data) {
      $window.sessionStorage.token = data.token;
      // Do something with the user here
      deferred.resolve(profile);
    })
    .error(function(data) {
      delete $window.sessionStorage.token;
      // Do something else here
      deferred.reject($rootScope.currentUser);
    });
  return deferred.promise;
}
</code></pre>

<p>```</p>

<p>So, back to that question of different facebook app id&rsquo;s to account for
different environments. grunt-ng-constant to the rescue&hellip;</p>

<h3>Using grunt-ng-constant</h3>

<p>First, let&rsquo;s install grunt-ng-constant:</p>

<p><code>
npm install grunt-ng-constant --save-dev
</code>
Next, in your <code>Gruntfile.js</code>, enter the following:</p>

<p>```javascript
// constants
ngconstant: {
  // Options for all targets
  options: {</p>

<pre><code>name: 'config',
</code></pre>

<p>  },
  // Environment targets
  development: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.app %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_APP_ID'
  }
}
</code></pre>

<p>  },
  production: {</p>

<pre><code>options: {
  dest: '&lt;%= yeoman.dist %&gt;/scripts/config.js'
},
constants: {
  ENV: {
    name: 'facebook',
    appId: 'YOUR_PROD_APP_ID'
  }
}
</code></pre>

<p>  }
},
```</p>

<p>This tells grunt to automatically create a file called config.js under
the <code>scripts</code> folder.</p>

<p>How do we tell grunt when to create this file? I put mine in the section
that tells it to run a local server for development. I added it to the run
task of the <code>grunt serve</code> task:</p>

<p>```javascript
grunt.registerTask(&lsquo;serve&rsquo;, function (target) {
  if (target === &lsquo;dist&rsquo;) {</p>

<pre><code>return grunt.task.run(['build', 'connect:dist:keepalive']);
</code></pre>

<p>  }</p>

<p>  grunt.task.run([</p>

<pre><code>'clean:server',
'ngconstant:development',
'bower-install',
'concurrent:server',
'autoprefixer',
'connect:livereload',
'watch'
</code></pre>

<p>  ]);
});
<code>``
And then, for grunt production, I added mine to the</code>grunt build` task:</p>

<p><code>javascript
grunt.registerTask('build', [
  'clean:dist',
  'ngconstant:production',
  'bower-install'
]);
</code></p>

<p>When grunt runs, a config.js file is created:</p>

<p>```javascript
angular.module(&lsquo;config&rsquo;, [])</p>

<p>.constant(&lsquo;ENV&rsquo;, {
  &lsquo;name&rsquo;: &lsquo;facebook&rsquo;,
  &lsquo;appId&rsquo;: &lsquo;your-development-appId&rsquo;
});
```
We need to add this new file to our index.html:</p>

<p>```html</p>

<script src="http://jsbalrog.github.io/scripts/config.js"></script>


<p>```</p>

<p>Now we can inject it into our angular app:</p>

<p><code>javascript
angular.module('myApp', ['ngCookies', 'ngResource', 'ngSanitize', 'ngRoute', 'facebook', 'config']).config(function ($routeProvider, $locationProvider, $httpProvider, $facebookProvider, ENV) {
</code></p>

<p>Finally, in the config of our app (the same place where we init our facebook module),
we use the ENV constant:</p>

<p><code>javascript
$facebookProvider.init({appId: ENV.appId});
</code></p>

<p>And that&rsquo;s it! Now, when you click the &ldquo;Login with Facebook&rdquo; button, the facebook login
popup will show that is the right facebook app for your environment.</p>
]]></content>
  </entry>
  
</feed>
